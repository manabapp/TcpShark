#!/bin/sh
##################### DONT EDIT THIS FILE ######################
#                                                              #
NAME="TcpShark"                                                #
DESCRIPTION="Packet analyzer for TCP troubleshooting"          #
VERSION="4.5.0"                                                #
AUTHOR="Hirose, Manabu <manabapp@gmail.com>"                   #
#                                                              #
#                            Copyright (C) 2014-2022 manabapp. #
################################################################

#==============================================================================#
# Defines                                                                      #
#==============================================================================#
MAX_STREAMS_DEFAULT=262144
MAX_STREAMS_LIMIT=1048576
MAX_INFOLEN_DEFAULT=48
MAX_LENGTH_LIMIT=65536
APPEARANCE_DEFAULT=0   # Mono

#==============================================================================#
# Function: Prints usage                                                       #
#==============================================================================#
usage()
{
    echo "usage: tcpshark [-i <interface>] [-p <port>] [-a <addr>] [-H] [-t a|ad|dd|e|r|rs] [-w] [-q] [-z] [-o | -f <field>]" 1>&2
if [ $OS_TYPE -eq 0 ]; then
    echo "       tcpshark -r <infile> [-p <port>] [-4 | -6 | -a <addr>] [-H] [-t a|ad|r] [-d] [-z | -f <field>]" 1>&2
else
    echo "       tcpshark -r <infile> [-p <port>] [-4 | -6 | -a <addr>] [-H] [-t a|ad|r] [-z | -f <field>]" 1>&2
fi
    echo "       tcpshark -r <infile> -s <index> [-H] [-t a|ad|dd|e|r|rs] [-v] [-w] [-q] [-z] [-o | -x <length> | -f <field>]" 1>&2
    echo "       tcpshark -r <infile> -n <number> [-e | -X]" 1>&2
    echo "       tcpshark -h  (Manual page)" 1>&2
    exit 1
}

#==============================================================================#
# Function: Prints version & md5 hash                                          #
#==============================================================================#
print_version()
{
    cmd=$0
    if [ ! -f $cmd ]; then
        cmd=`which tcpshark`
        if [ $? -ne 0 ]; then
            printf "${NAME} version: ${ACES_BOLD}${VERSION}${ACES_END}  ${ACES_GRAY}(md5:Unknown)${ACES_END}\n"
            exit 0
        fi
    fi
    if [ $OS_TYPE -eq 2 ]; then
        sum=`md5 $cmd | cut -d' ' -f 4`
    else
        sum=`md5sum $cmd | cut -d' ' -f 1`
    fi
    printf "${NAME} version: ${ACES_BOLD}${VERSION}${ACES_END}  ${ACES_GRAY}(md5:${sum})${ACES_END}\n"
    exit 0
}

#==============================================================================#
# Function: Prints on-line manual                                              #
#==============================================================================#
print_help()
{
    printf "${ACES_BOLD}NAME${ACES_END}\n"
    printf "    ${NAME} ${ACES_GRAY}- ${DESCRIPTION}${ACES_END}\n"
    printf "\n"
    printf "${ACES_BOLD}SYNOPSIS${ACES_END}\n"
    printf "    ${ACES_GRAY}<list mode>${ACES_END}\n"
    printf "      ${ACES_BOLD}tcpshark${ACES_END} -r <infile> [-p <port>] [-4 | -6 | -a <addr>] [-H] [-t a|ad|r]\n"
if [ $OS_TYPE -eq 0 ]; then
    printf "                              [-d] [-z | -f <field>]\n"
else
    printf "                              [-z | -f <field>]\n"
fi
    printf "\n"
    printf "    ${ACES_GRAY}<flow mode>${ACES_END}\n"
    printf "      ${ACES_BOLD}tcpshark${ACES_END} -r <infile> -s <index> [-H] [-t a|ad|dd|e|r|rs] [-v] [-w] [-q]\n"
    printf "                              [-z] [-o | -x <length> | -f <field>]\n"
    printf "\n"
    printf "      ${ACES_GREEN}Live capture${ACES_END}\n"
    printf "      ${ACES_BOLD}tcpshark${ACES_END} [-i <interface>] [-p <port>] [-a <addr>] [-H] [-t a|ad|dd|e|r|rs]\n"
    printf "                              [-w] [-q] [-z] [-o | -f <field>]\n"
    printf "\n"
    printf "    ${ACES_GRAY}<one mode>${ACES_END}\n"
    printf "      ${ACES_BOLD}tcpshark${ACES_END} -r <infile> -n <number> [-e | -X]\n"
    printf "\n"
    printf "${ACES_BOLD}DESCRIPTION${ACES_END}\n"
    printf "    ${NAME} is network analyzing script, powered by Wireshark.\n"
    printf "    This utility displays visually TCP stream for ease of analysis.\n"
    printf "\n"
    printf "    How to use:\n"
    printf "      First, lists TCP streams in list mode.\n"
    printf "      Next, specifies the index of stream and looks over the packet flow in\n"
    printf "      flow mode. In addition, you can analyze as you like by piping the result\n"
    printf "      to '${ACES_BOLD}less -R${ACES_END}' command.\n"
    printf "\n"
    printf "        ${ACES_GRAY}$ tcpshark -r tcpdump.pcap -s 0 | less -R${ACES_END}\n"
    printf "\n"
    printf "      In flow mode for live capture, needs to run as root user.\n"
    printf "\n"
    printf "${ACES_BOLD}OPTIONS${ACES_END}\n"
    printf "    ${ACES_BOLD}-r${ACES_END} ${ACES_GRAY}<infile>${ACES_END}\n"
    printf "          Reads packet data from infile.\n"
    printf "          This utility can analyze the file captured by Wireshark, tcpdump,\n"
    printf "          snoop, etc.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-i${ACES_END} ${ACES_GRAY}<interface>${ACES_END}\n"
    printf "          Reads live packet captured from the network interface.\n"
    printf "          Network interface should match one of the names or numbers listed in\n"
    printf "          '${ACES_BOLD}tshark -D${ACES_END}' command. If no interface is specified, the first non-\n"
    printf "          loopback interface is choosed.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-s${ACES_END} ${ACES_GRAY}<index>${ACES_END}\n"
    printf "          Displays the specific stream in flow mode.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-n${ACES_END} ${ACES_GRAY}<number>${ACES_END}\n"
    printf "          Displays the specific packet in one mode.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-H${ACES_END}\n"
    printf "          Omits the header information.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-t${ACES_END} ${ACES_GRAY}a|ad|dd|e|r|rs${ACES_END}\n"
    printf "          Selects the format of the packet timestamp.\n"
    printf "\n"
    printf "          ${ACES_GRAY}The format can be one of:${ACES_END}\n"
    printf "\n"
    printf "            ${ACES_BOLD}a${ACES_END}    absolute time with no date [default]\n"
    printf "            ${ACES_BOLD}ad${ACES_END}   absolute date and time\n"
    printf "            ${ACES_BOLD}dd${ACES_END}   delta time since the previous displayed packet\n"
    printf "            ${ACES_BOLD}e${ACES_END}    epoch time in seconds since Jan 1, 1970 00:00:00\n"
    printf "            ${ACES_BOLD}r${ACES_END}    relative time since the first packet in the capture file\n"
    printf "            ${ACES_BOLD}rs${ACES_END}   relative time since the first packet in the stream\n"
    printf "\n"
    printf "    ${ACES_BOLD}-p${ACES_END} ${ACES_GRAY}<port>${ACES_END}\n"
    printf "          Only streams with specified port are displayed.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-4${ACES_END}\n"
    printf "          Only IPv4 streams are displayed.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-6${ACES_END}\n"
    printf "          Only IPv6 streams are displayed.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-a${ACES_END} ${ACES_GRAY}<addr>${ACES_END}\n"
    printf "          Only streams with specified IPv4/v6 address are displayed.\n"
    printf "\n"
if [ $OS_TYPE -eq 0 ]; then
    printf "    ${ACES_BOLD}-d${ACES_END}\n"
    printf "          Streams list is sorted in descending order according to the total\n"
    printf "          number of packets.\n"
    printf "\n"
fi
    printf "    ${ACES_BOLD}-v${ACES_END}\n"
    printf "          Reverses the source and destination.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-w${ACES_END}\n"
    printf "          Calculated window size is displayed, if scaling.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-q${ACES_END}\n"
    printf "          Relative sequence numbers and acknowledgement numbers are displayed.\n"
    printf "          In default, absolute numbers.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-z${ACES_END}\n"
    printf "          TCP analysis information is displayed.\n"
    printf "          In detail, see \"${ACES_BOLD}OUTPUT FORMAT${ACES_END}\".\n"
    printf "\n"
    printf "    ${ACES_BOLD}-o${ACES_END}\n"
    printf "          TCP Option's values are displayed.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-x${ACES_END} ${ACES_GRAY}<length>${ACES_END}\n"
    printf "          TCP segment data up to the specified bytes is output by hexadecimal\n"
    printf "          dump. ${ACES_GRAY}(Wireshark 2.4.0 or newer)${ACES_END}\n"
    printf "          Upper limit is ${ACES_BOLD}${MAX_LENGTH_LIMIT}${ACES_END}. If length is ${ACES_BOLD}0${ACES_END}, all data is displayed.\n"
    printf "          Note that this data is TCP payload data, so not include TCP, IP, and\n"
    printf "          Ethernet header fields.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-X${ACES_END}\n"
    printf "          Packet data is output by hexadecimal dump.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-f${ACES_END} ${ACES_GRAY}<field>${ACES_END}\n"
    printf "          Specified field is displayed.\n"
    printf "          In list mode, statistics information is displayed in each direction.\n"
    printf "          In flow mode, can be specified up to twice.\n"
    printf "          About available field, see Wireshark web site.\n"
    printf "\n"
    printf "            ${ACES_GRAY}https://www.wireshark.org/docs/dfref/${ACES_END}\n"
    printf "\n"
    printf "    ${ACES_BOLD}-e${ACES_END}\n"
    printf "          Prints an entire information of the packet details.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-h${ACES_END}\n"
    printf "          Prints this help page.\n"
    printf "\n"
    printf "    ${ACES_BOLD}-V${ACES_END}\n"
    printf "          Prints the version and exits.\n"
    printf "\n"
    printf "${ACES_BOLD}OUTPUT FORMAT${ACES_END}\n"
    printf "    Streams or packets are output in the following format:\n"
    printf "\n"
    printf "    ${ACES_GRAY}<list mode>${ACES_END}\n"
    printf "      ${ACES_BOLD}Filter${ACES_END}             Display filter used by Wireshark.\n"
    printf "\n"
    printf "      ${ACES_BOLD}CField${ACES_END}             Custom field for statistics information.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Index${ACES_END}              Stream index.\n"
    printf "\n"
    printf "      ${ACES_BOLD}TIME${ACES_END}               Timestamp in first packet.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Src/Dst ADDRESS${ACES_END}    Source/Destination IP address and port.\n"
    printf "                         When IPv6 packets are encapsulated into IPv4 (6to4,\n"
    printf "                         6in4, or 6rd), both address pairs of the stream are\n"
    printf "                         displayed.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Duration${ACES_END}           Period between first/last packets.\n"
    printf "\n"
    printf "      ${ACES_BOLD}FLAGS${ACES_END}              TCP flag's bitwize OR on all packets.\n"
    printf "\n"
    printf "                           ${ACES_GREEN}F${ACES_END} : Fin\n"
    printf "                           ${ACES_CYAN}S${ACES_END} : Syn\n"
    printf "                           ${ACES_RED}R${ACES_END} : Reset\n"
    printf "                           ${ACES_BOLD}P${ACES_END} : Push\n"
    printf "                           ${ACES_GRAY}A${ACES_END} : Acknowledgment\n"
    printf "                           ${ACES_MAGENTA}U${ACES_END} : Urgent\n"
    printf "                           ${ACES_YELLOW}E${ACES_END} : ECN-Echo\n"
    printf "                           ${ACES_MAGENTA}C${ACES_END} : Congestion Window Reduced (CWR)\n"
    printf "                           ${ACES_YELLOW}N${ACES_END} : Accurate ECN / Nonce\n"
    printf "\n"
    printf "      ${ACES_BOLD}Protocol${ACES_END}           Upper layer protocol over TCP/IP.\n"
    printf "                         If a stream contains multiple protocols, displays up to\n"
    printf "                         three protocols.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Packets Bytes${ACES_END}      Number of packets count and total of TCP data length in\n"
    printf "                         each direction.\n"
    printf "                         Note that data length is not a frame size.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Analysis${ACES_END}           TCP analysis statistics.\n"
    printf "\n"
    printf "                           ${ACES_GREEN}ret${ACES_END} : Retransmission\n"
    printf "                           ${ACES_CYAN}fst${ACES_END} : Fast Retransmission\n"
    printf "                           ${ACES_CYAN}spu${ACES_END} : Spurious Retransmission  ${ACES_GRAY}(Wireshark 1.12.0 or newer)${ACES_END}\n"
    printf "                           ${ACES_BLUE}dup${ACES_END} : Duplicate ACK\n"
    printf "                           ${ACES_BOLD}out${ACES_END} : Out Of Order\n"
    printf "                           ${ACES_RED}los${ACES_END} : Previous Segment Unseen\n"
    printf "                           ${ACES_RED}alo${ACES_END} : ACKed Unseen Packet\n"
    printf "                           ${ACES_MAGENTA}ful${ACES_END} : Window full\n"
    printf "                           ${ACES_YELLOW}wup${ACES_END} : Window update\n"
    printf "                           ${ACES_BOLD}zro${ACES_END} : Zero Window\n"
    printf "                           ${ACES_MAGENTA}zrp${ACES_END} : Zero Window Probe\n"
    printf "                           ${ACES_YELLOW}zpa${ACES_END} : Zero Window Probe Ack\n"
    printf "                           ${ACES_MAGENTA}kep${ACES_END} : Keep Alive\n"
    printf "                           ${ACES_YELLOW}kpa${ACES_END} : Keep Alive ACK\n"
    printf "                           ${ACES_BOLD}tfo${ACES_END} : SYN with TFO cookie      ${ACES_GRAY}(Wireshark 2.0.0 or newer)${ACES_END}\n"
    printf "                           ${ACES_MAGENTA}afo${ACES_END} : Accepting TFO data       ${ACES_GRAY}(Wireshark 3.4.0 or newer)${ACES_END}\n"
    printf "                           ${ACES_YELLOW}ifo${ACES_END} : Ignoring TFO data        ${ACES_GRAY}(Wireshark 3.4.0 or newer)${ACES_END}\n"
    printf "                           ${ACES_BOLD}prt${ACES_END} : TCP Port numbers reused\n"
    printf "\n"
    printf "      ${ACES_BOLD}Custom STATISTICS${ACES_END}  Number of packets which includes the specified field.\n"
    printf "                         Calculates sum-total, minimum, maximum and average\n"
    printf "                         value, if field type is numerical (INT, UINT, BOOLEAN,\n"
    printf "                         DOUBLE, FLOAT, or RELATIVE_TIME).\n"
    printf "\n"
    printf "    ${ACES_GRAY}<flow mode>${ACES_END}\n"
    printf "      ${ACES_BOLD}Filter${ACES_END}             Display filter used by Wireshark.\n"
    printf "\n"
    printf "      ${ACES_BOLD}CField${ACES_END}             Custom field(s).\n"
    printf "\n"
    printf "      ${ACES_BOLD}Stream${ACES_END}             Pair of IP address and TCP port.\n"
    printf "                         MAC addresses are displayed if Ethernet. Additionally,\n"
    printf "                         vlan id is displayed if IEEE 802.1Q.\n"
    printf "\n"
    printf "                         If known vendor, vendor name for oui is displayed.\n"
    printf "                         ${ACES_GRAY}(Wireshark 3.2.0 or newer)${ACES_END}\n"
    printf "\n"
    printf "      ${ACES_BOLD}No.${ACES_END}                Packet number in capture file.\n"
    printf "\n"
    printf "      ${ACES_BOLD}TIME${ACES_END}               Timestamp in each packet.\n"
    printf "\n"
    printf "      ${ACES_BOLD}WINDOW Size${ACES_END}        TCP windows size.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Src/Dst PORT${ACES_END}       Source or Destination port.\n"
    printf "\n"
    printf "      ${ACES_BOLD}LENGTH${ACES_END}             TCP segment length.\n"
    printf "\n"
    printf "      ${ACES_BOLD}FLAGS${ACES_END}              TCP flags.\n"
    printf "                         Please refer to the description in <list mode>.\n"
    printf "\n"
    printf "      ${ACES_BOLD}SEQ/ACK Number${ACES_END}     Sequence or Acknowledgment number.\n"
    printf "\n"
    printf "      ${ACES_BOLD}OPTION${ACES_END}             TCP options.\n"
    printf "\n"
    printf "                           ${ACES_GREEN}m${ACES_END}${ACES_YELLOW}w${ACES_END}${ACES_CYAN}Ss${ACES_END}${ACES_BOLD}t${ACES_END}${ACES_RED}O${ACES_END}\n"
    printf "                           ${ACES_GRAY}------${ACES_END}\n"
    printf "                           ${ACES_GRAY}|||||+${ACES_END} Other option (except EOL, NOP)\n"
    printf "                           ${ACES_GRAY}||||+-${ACES_END} TCP Time Stamp Option\n"
    printf "                           ${ACES_GRAY}|||+--${ACES_END} TCP SACK Option\n"
    printf "                           ${ACES_GRAY}||+---${ACES_END} TCP SACK Permitted Option\n"
    printf "                           ${ACES_GRAY}|+----${ACES_END} TCP Window Scale Option\n"
    printf "                           ${ACES_GRAY}+-----${ACES_END} TCP MSS Option\n"
    printf "\n"
    printf "      ${ACES_BOLD}Analysis${ACES_END}           TCP analysis information for TCP troubleshooting.\n"
    printf "                         Please refer to the description in <list mode>.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Protocol${ACES_END}           Upper layer protocol over TCP/IP.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Information${ACES_END}        Information for upper layer protocol.\n"
    printf "                         Same contents as Wireshark '${ACES_BOLD}Info${ACES_END}' field is displayed.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Option VALUES${ACES_END}      TCP Option's values (if some bits in OPTION area are\n"
    printf "                         set).\n"
    printf "\n"
    printf "                           [${ACES_GREEN}m${ACES_END}] MSS=${ACES_GRAY}XXX${ACES_END}             : MSS value\n"
    printf "                           [${ACES_YELLOW}w${ACES_END}] WS=${ACES_GRAY}XXX${ACES_END}(${ACES_GRAY}YYY${ACES_END})         : Shift count, multiplier\n"
    printf "                           [${ACES_CYAN}S${ACES_END}] SACK_PERM=1         : ---\n"
    printf "                           [${ACES_CYAN}s${ACES_END}] SLE=${ACES_GRAY}XXX${ACES_END} SRE=${ACES_GRAY}YYY${ACES_END}     : ACK left edge, right edge\n"
    printf "                           [${ACES_BOLD}t${ACES_END}] TSval=${ACES_GRAY}XXX${ACES_END} TSecr=${ACES_GRAY}YYY${ACES_END} : Timestamp value, printf reply\n"
    printf "                           [${ACES_RED}O${ACES_END}] OTHER(kind:${ACES_GRAY}XXX${ACES_END})     : TCP option's kind\n"
    printf "\n"
    printf "      ${ACES_BOLD}Payload DATA${ACES_END}       Hexadecimal dump and printable ascii string of TCP\n"
    printf "                         segment data.\n"
    printf "\n"
    printf "      ${ACES_BOLD}Custom VALUE${ACES_END}       Value of specified custom field.\n"
    printf "                         Only displays if each packet includes the field.\n"
    printf "                         If you specify -f option twice, 2nd field is displayed\n"
    printf "                         in parentheses.\n"
    printf "\n"
    printf "    ${ACES_GRAY}<one mode>${ACES_END}\n"
    printf "      ${NAME} displays packet details or hex dump from the following command\n"
    printf "      result:\n"
    printf "\n"
    printf "        ${ACES_GRAY}$ tshark -r <infile> -Y \"frame.number == <number>\" -V${ACES_END}\n"
    printf "        or\n"
    printf "        ${ACES_GRAY}$ tshark -r <infile> -Y \"frame.number == <number>\" -x${ACES_END}\n"
    printf "\n"
    printf "\n"
    printf "${ACES_BOLD}ENVIRONMENT VARIABLES${ACES_END}\n"
    printf "    ${ACES_BOLD}TCPSHARK_TSHARK_COMMAND${ACES_END}\n"
    printf "          File path of executable command '${ACES_BOLD}tshark${ACES_END}'.\n"
    printf "          If command not found on your system, set the full path of the command.\n"
    printf "\n"
if [ $OS_TYPE -eq 0 -o $OS_TYPE -eq 1 ]; then
    printf "    ${ACES_BOLD}TCPSHARK_EXECUTION_USER${ACES_END}\n"
    printf "          Execution user name to use instead of root.\n"
    printf "          If you run as root user, ${NAME} internally executes tshark as\n"
    printf "          the user specified in this variable.\n"
    printf "\n"
fi
    printf "    ${ACES_BOLD}TCPSHARK_MAX_STREAMS${ACES_END}\n"
    printf "          Maximum number of streams that can be processed in list mode.\n"
    printf "          Default value is ${ACES_BOLD}${MAX_STREAMS_DEFAULT}${ACES_END}. Upper limit is ${ACES_BOLD}${MAX_STREAMS_LIMIT}${ACES_END}.\n"
    printf "          If a huge number of streams in your capture file, set the number\n"
    printf "          of streams or each more.\n"
    printf "          Note that it may require a lot of memory to process huge streams.\n"
    printf "\n"
    printf "    ${ACES_BOLD}TCPSHARK_APPEARANCE${ACES_END}\n"
    printf "          ${NAME} displays colorfully with ANSI color escape sequences.\n"
    printf "          Selects appearance according to your terminal color from\n"
    printf "          '${ACES_BOLD}Mono${ACES_END}(default), '${ACES_BOLD}Dark${ACES_END}(recommended)' or '${ACES_BOLD}Light${ACES_END}'.\n"
    printf "          If '${ACES_BOLD}Mono${ACES_END}', displays in monochrome.\n"
    printf "          If your terminal's background is blackish color, set '${ACES_BOLD}Dark${ACES_END}'.\n"
    printf "          If whitish color, set '${ACES_BOLD}Light${ACES_END}'.\n"
    printf "\n"
    printf "    ${ACES_BOLD}TCPSHARK_MAX_INFORMATION_LENGTH${ACES_END}\n"
    printf "          Maximum length of protocol information in flow mode.\n"
    printf "          If an information is longer than this length, the information is\n"
    printf "          truncated to this length.\n"
    printf "          Default length is ${ACES_BOLD}${MAX_INFOLEN_DEFAULT}${ACES_END}. Upper limit is ${ACES_BOLD}${MAX_LENGTH_LIMIT}${ACES_END}. If ${ACES_BOLD}0${ACES_END}, not truncated.\n"
    printf "\n"
    printf "${ACES_BOLD}EXIT STATUS${ACES_END}\n"
    printf "    This utility exits 0 on success, or 1 if error.\n"
    printf "\n"
}

#==============================================================================#
# Function: Checks if an integer in the range                                  #
#==============================================================================#
check_streams()
{
    number=$1
    expr "$number" + 1 > /dev/null 2>&1
    if [ $? -lt 2 ] ; then
        if [ $number -ge 1 -a $number -le $MAX_STREAMS_LIMIT ]; then
            return 0
        fi
    fi
    return 1
}
check_number()
{
    number=$1
    expr "$number" + 1 > /dev/null 2>&1
    if [ $? -lt 2 ] ; then
        if [ $number -ge 1 ]; then
            return 0
        fi
    fi
    return 1
}

#==============================================================================#
# Function: Checks if an integer in the range for data length                  #
#==============================================================================#
check_length()
{
    length=$1
    expr "$length" + 1 > /dev/null 2>&1
    if [ $? -lt 2 ] ; then
        if [ $length -ge 0 -a $length -le $MAX_LENGTH_LIMIT ]; then
            return 0
        fi
    fi
    return 1
}

#==============================================================================#
# Function: Checks if the field is supported                                   #
#==============================================================================#
check_field()
{
    $PRE_COMMAND "$TSHARK_COMMAND" -G fields | cut -f 3 | "$GREP_COMMAND" -Fx "$1" > /dev/null 2>&1
    return $?
}

#==============================================================================#
# Function: Returns wireshark version                                          #
#==============================================================================#
get_version()
{
    line=`$PRE_COMMAND "$TSHARK_COMMAND" -v | head -1`
    if [ $? -ne 0 ]; then
        exit 1
    fi
    version=`echo "$line" | cut -d ' ' -f 2`
    echo "$version" | "$GREP_COMMAND" "^[0-9][\.0-9]*$" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        printf "$version"
        return
    fi
    version=`echo "$line" | cut -d ' ' -f 3`
    echo "$version" | "$GREP_COMMAND" "^[0-9][\.0-9]*$" > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        printf "$version"
        return
    fi
    printf "unknown"
}

#==============================================================================#
# Function: Returns field type (0:ohter, 1:integer, 2:float)                   #
#==============================================================================#
get_ftype()
{
    $PRE_COMMAND "$TSHARK_COMMAND" -G fields | "$AWK_COMMAND" -F "\t" -v field="$1" '
    BEGIN {
        type = 0
    };
    /^F/ {
        if ($3 == field) {
            if ($4 == "FT_BOOLEAN")            type = 1
            else if ($4 == "FT_INT8")          type = 1
            else if ($4 == "FT_INT16")         type = 1
            else if ($4 == "FT_INT24")         type = 1
            else if ($4 == "FT_INT32")         type = 1
            else if ($4 == "FT_INT64")         type = 1
            else if ($4 == "FT_UINT8")         type = 1
            else if ($4 == "FT_UINT16")        type = 1
            else if ($4 == "FT_UINT24")        type = 1
            else if ($4 == "FT_UINT32")        type = 1
            else if ($4 == "FT_UINT64")        type = 1
            else if ($4 == "FT_FLOAT")         type = 2
            else if ($4 == "FT_DOUBLE")        type = 2
            else if ($4 == "FT_RELATIVE_TIME") type = 2
            else                               type = 0
            exit
        }
    };
    END {
        printf(type)
    } '
}

#==============================================================================#
# Function: Returns and one of comma separated values                          #
#==============================================================================#
get_value()
{
    echo "$1" | "$AWK_COMMAND" -F "\t" -v column="$2" '
    {
        if ($column == "") {
            value = ""
        }
        else {
            num = split($column, array, ",")
            if (num == 0)
                value = ""
            else
                value = array[num]
        }
        printf(value)
    } '
}

#==============================================================================#
# Function: Prints header information for list mode                            #
#==============================================================================#
print_header_list()
{
    line1="======="
    line2="       "
    line3="Index  "
    if [ $TIME_TYPE -eq 1 ]; then
        line1="${line1}=========================="
        line2="${line2}                          "
        line3="${line3}                      TIME"
    else
        line1="${line1}==============="
        line2="${line2}               "
        line3="${line3}           TIME"
    fi
    line1="${line1}===================================================="
    line2="${line2}                                                    "
    line3="${line3}                    Src/Dst ADDRESS                 "
    line1="${line1}================"
    line2="${line2}                "
    line3="${line3}        Duration"
    line1="${line1}============="
    line2="${line2}             "
    line3="${line3}  FLAGS      "
    if [ $FLAG_Z -eq 1 ]; then
        if [ $ANALYSIS_LEVEL -eq 0 ]; then
            line1="${line1}========================================================================="
            line2="${line2} | Analysis                                                             |"
            line3="${line3} | ret  fst  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  prt |"
        elif [ $ANALYSIS_LEVEL -eq 1 ]; then
            line1="${line1}=============================================================================="
            line2="${line2} | Analysis                                                                  |"
            line3="${line3} | ret  fst  spu  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  prt |"
        elif [ $ANALYSIS_LEVEL -eq 2 ]; then
            line1="${line1}==================================================================================="
            line2="${line2} | Analysis                                                                       |"
            line3="${line3} | ret  fst  spu  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  tfo  prt |"
        else
            line1="${line1}============================================================================================="
            line2="${line2} | Analysis                                                                                 |"
            line3="${line3} | ret  fst  spu  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  tfo  afo  ifo  prt |"
        fi
    elif [ $FLAG_F -eq 1 ]; then
        line1="${line1}======================================================================================"
        line2="${line2} | Custom STATISTICS           ${ACES_BLUE}<----${ACES_END}       |       ${ACES_BOLD}---->${ACES_END}                             |"
        line3="${line3} |  COUNT        MIN        MAX        AVG |  COUNT        MIN        MAX        AVG |"
    else
        line1="${line1}============================"
        line2="${line2}                            "
        line3="${line3}  Protocol                  "
        line1="${line1}=============================================="
        line2="${line2} |         ${ACES_BLUE}<----${ACES_END}       |       ${ACES_BOLD}---->${ACES_END}         |"
        line3="${line3} | Packets       Bytes | Packets       Bytes |"
    fi
    
    printf "${line1}\n"
    printf "TCP Stream list\n"
    printf "Filter: ${TSHARK_FILTER}\n"
    if [ $FLAG_F -eq 1 ]; then
        printf "CField: ${CUSTOM_FIELD}\n"
    fi
    printf "${line2}\n"
    printf "${line3}\n"
    printf "${line1}\n"
}

#==============================================================================#
# Function: Prints header information for flow mode                            #
#==============================================================================#
print_header_flow()
{
    line1=""
    line2=""
    if [ $FLAG_R -eq 1 ]; then
        line1="${line1}=========="
        line2="${line2}     No.  "
    fi
    if [ $TIME_TYPE -eq 1 ]; then
        line1="${line1}=========================="
        line2="${line2}                      TIME"
    elif [ $TIME_TYPE -eq 3 ]; then
        line1="${line1}================="
        line2="${line2}             TIME"
    else
        line1="${line1}==============="
        line2="${line2}           TIME"
    fi
    line1="${line1}================================================================="
    line2="${line2}          TCP flow (WINDOW Size, Src/Dst PORT, LENGTH)           "
    line1="${line1}======="
    line2="${line2}FLAGS  "
    line1="${line1}==============================="
    line2="${line2}         SEQ/ACK Number        "
    line1="${line1}========"
    line2="${line2}  OPTION"
    if [ $FLAG_Z -eq 1 ]; then
        line1="${line1}=========="
        line2="${line2}  Analysis"
    fi
    if [ $FLAG_O -eq 1 ]; then
        line1="${line1}==============="
        line2="${line2}  Option VALUES"
    elif [ $FLAG_X -eq 1 ]; then
        line1="${line1}=================================================================="
        line2="${line2}  Payload DATA                                                    "
    elif [ $FLAG_F -eq 1 ]; then
        line1="${line1}=============="
        line2="${line2}  Custom VALUE"
    else
        line1="${line1}=========="
        line2="${line2}  Protocol"
        line1="${line1}==============="
        line2="${line2}    Information"
    fi

    printf "${line1}\n"
    if [ $FLAG_R -eq 1 ]; then
        printf "TCP Stream flow\n"
    else
        printf "TCP Stream flow ${ACES_GRAY}-${ACES_END} ${ACES_GREEN}Live capture${ACES_END} ${ACES_GRAY}(Ctrl+C to exit)${ACES_END}\n"
    fi
    if [ $FLAG_R -eq 1 ]; then
        printf "Filter: ${TSHARK_FILTER}\n"
    else
        printf "Filter ${ACES_GRAY}[capture]${ACES_END}: ${TSHARK_CAPTURE_FILTER}\n"
        printf "Filter ${ACES_GRAY}[display]${ACES_END}: ${TSHARK_FILTER}\n"
    fi
    if [ $FLAG_F -eq 1 ]; then
        printf "CField: ${CUSTOM_FIELD}"
        if [ $FLAG_F2 -eq 1 ]; then
            printf " ${ACES_GRAY}(${ACES_END}${CUSTOM_FIELD2}${ACES_GRAY})${ACES_END}"
        fi
        printf "\n"
    fi
    if [ $FLAG_R -eq 1 ]; then
        #==============================================#
        # Finds the stream                             #
        #==============================================#
        printf "Finding stream...\r" 1>&2
        tshark_fields="-e tcp.srcport \
        -e tcp.dstport \
        -e ip.src \
        -e ip.dst \
        -e ipv6.src \
        -e ipv6.dst \
        -e eth.src \
        -e eth.dst \
        -e vlan.id"
        if [ $DISPLAY_VENDOR -eq 1 ]; then
            tshark_fields="$tshark_fields -e eth.src.oui_resolved -e eth.dst.oui_resolved"
        fi
        tshark_fields="$tshark_fields -e tcp.stream"  # dummy field for Cygwin
        
        line=`$PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -R "$TSHARK_FILTER" -2 -c 1 -T fields $tshark_fields $TSHARK_FIND_OPTIONS`
        if [ $? -ne 0 ]; then
            return 1
        fi
        srcport=`echo "$line" | cut -f 1`
        dstport=`echo "$line" | cut -f 2`
        srcaddr=`get_value "$line" 3`
        dstaddr=`get_value "$line" 4`
        srcaddr6=`get_value "$line" 5`
        dstaddr6=`get_value "$line" 6`
        srcmac=`echo "$line" | cut -f 7`
        dstmac=`echo "$line" | cut -f 8`
        vlanid=`echo "$line" | cut -f 9`
        if [ $DISPLAY_VENDOR -eq 1 ]; then
            srcvendor=`echo "$line" | cut -f 10`
            dstvendor=`echo "$line" | cut -f 11`
        fi
        if [ $FLAG_V -eq 1 ]; then
            save="$srcport";  srcport="$dstport";   dstport="$save"
            save="$srcaddr";  srcaddr="$dstaddr";   dstaddr="$save"
            save="$srcaddr6"; srcaddr6="$dstaddr6"; dstaddr6="$save"
            save="$srcmac";   srcmac="$dstmac";     dstmac="$save"
            if [ $DISPLAY_VENDOR -eq 1 ]; then
                save="$srcvendor"; srcvendor="$dstvendor"; dstvendor="$save"
            fi
        fi
        if [ -n "$srcaddr6" ]; then
            printf "Stream: ${ACES_BOLD}${srcaddr6}.${srcport}${ACES_END} ${ACES_GRAY}<---->${ACES_END} ${ACES_BOLD}${dstaddr6}.${dstport}${ACES_END}\n"
            if [ -n "$srcaddr" ]; then
                printf "        ${srcaddr} ${ACES_GRAY}<---->${ACES_END} ${dstaddr}\n"
            fi
        else
            printf "Stream: ${ACES_BOLD}${srcaddr}:${srcport}${ACES_END} ${ACES_GRAY}<---->${ACES_END} ${ACES_BOLD}${dstaddr}:${dstport}${ACES_END}\n"
        fi
        if [ -n "$srcmac" -a -n "$dstmac" ]; then
            if [ $DISPLAY_VENDOR -eq 1 ]; then
                if [ -z "$srcvendor" ]; then
                    srcvendor="Unknown"
                fi
                if [ -z "$dstvendor" ]; then
                    dstvendor="Unknown"
                fi
                printf "        ${ACES_GRAY}${srcmac}(${srcvendor}), ${dstmac}(${dstvendor})${ACES_END}"
            else
                printf "        ${ACES_GRAY}${srcmac}, ${dstmac}${ACES_END}"
            fi
            if [ -n "$vlanid" ]; then
                printf "  [vlan: ${ACES_BOLD}${vlanid}${ACES_END}]"
            fi
            printf "\n"
        fi
    fi
    printf "\n"
    printf "${line2}\n"
    printf "${line1}\n"
}

#==============================================================================#
# Function: Analyzes and print packets for list mode                           #
#==============================================================================#
tcp_stream_list()
{
    "$AWK_COMMAND" -v os_type="$OS_TYPE"               \
                   -v time_type="$TIME_TYPE"           \
                   -v descending="$FLAG_D"             \
                   -v analysis="$FLAG_Z"               \
                   -v analysis_level="$ANALYSIS_LEVEL" \
                   -v custom="$FLAG_F"                 \
                   -v custom_column="$CUSTOM_COLUMN"   \
                   -v custom_ftype="$CUSTOM_FTYPE"     \
                   -v max_streams="$MAX_STREAMS"       \
                   -v appearance="$APPEARANCE" '
    function last_value(e) {
        if (e == "")
            return ""
        num = split(e, array, ",")
        if (num == 0)
            return ""
        return array[num]
    }
    function compare_streams(i1, v1, i2, v2) {
        if (!indexes[i1])
            return 1
        if (!indexes[i2])
            return -1
        
        rtime1   = streams[i1, "rtime"]
        rtime2   = streams[i2, "rtime"]
        packets1 = streams[i1, "l_packets"] + streams[i1, "r_packets"]
        packets2 = streams[i2, "l_packets"] + streams[i2, "r_packets"]
        bytes1   = streams[i1, "l_bytes"]   + streams[i1, "r_bytes"]
        bytes2   = streams[i2, "l_bytes"]   + streams[i2, "r_bytes"]
        
        if (packets1 > packets2)      return -1
        else if (packets1 < packets2) return 1
        else if (bytes1 > bytes2)     return -1
        else if (bytes1 < bytes2)     return 1
        else if (rtime1 < rtime2)     return -1
        else                          return 1
    }
    function colored_port(port) {
        if (port < 1024)
            return sprintf("%s%-5d%s", ACES_BOLD, port, ACES_END)
        if (port >= 32768)
            return sprintf("%s%-5d%s", ACES_GRAY, port, ACES_END)
        return sprintf("%-5d", port)
    }
    function prefix10(str) {
        if (length(str) > 10) {
            if (substr(str, 10, 1) == ".")
                return substr(str, 1, 9)
            else
                return substr(str, 1, 10)
        }
        return str
    }
    function print_statistics(cnt, sum, min, max) {
        if (cnt == 0)
            printf("%s", ACES_GRAY)
        
        printf("  %7d",  cnt)
        
        if (custom_ftype == 0)      value = "-"
        else if (custom_ftype == 2) value = prefix10(sprintf("%10.6f", min))
        else                        value = sprintf("%d", min)
        printf(" %10s", value)
        
        if (custom_ftype == 0)      value = "-"
        else if (custom_ftype == 2) value = prefix10(sprintf("%10.6f", max))
        else                        value = sprintf("%d", max)
        printf(" %10s", value)
        
        if (custom_ftype == 0)      value = "-"
        else if (cnt == 0)          value = "NaN"
        else if (custom_ftype == 2) value = prefix10(sprintf("%10.6f", sum / cnt))
        else                        value = prefix10(sprintf("%10.2f", sum / cnt))
        printf(" %10s", value)
        
        if (cnt == 0)
            printf("%s", ACES_END)
    }
    function print_traffic(packets, bytes) {
        if (packets > 0)
            printf("   %7d", packets)
        else
            printf("   %s%7d%s", ACES_GRAY, packets, ACES_END)
        
        if (bytes > 0)
            printf("  %10u", bytes)
        else
            printf("  %s%10u%s", ACES_GRAY, bytes, ACES_END)
    }
    BEGIN {
        if (os_type == 3)
            RS = "\r\n"
        FS = "\t"
        exceeded = 0
        analysis_num = 0
        for (i = 0; i <= max_streams; i++)
            indexes[i] = 0
        
        ### ANSI Color Escape Sequences ###
        if (appearance == 0) {
            ACES_BOLD    = ""
            ACES_RED     = ""
            ACES_GREEN   = ""
            ACES_YELLOW  = ""
            ACES_BLUE    = ""
            ACES_MAGENTA = ""
            ACES_CYAN    = ""
            ACES_GRAY    = ""
            ACES_END     = ""
        }
        else if (appearance == 1) {
            ACES_BOLD    = "\033[1;97m"
            ACES_RED     = "\033[1;91m"
            ACES_GREEN   = "\033[1;92m"
            ACES_YELLOW  = "\033[1;93m"
            ACES_BLUE    = "\033[1;94m"
            ACES_MAGENTA = "\033[1;95m"
            ACES_CYAN    = "\033[1;96m"
            ACES_GRAY    = "\033[37m"
            ACES_END     = "\033[0m"
        }
        else {
            ACES_BOLD    = "\033[1;30m"
            ACES_RED     = "\033[1;31m"
            ACES_GREEN   = "\033[1;32m"
            ACES_YELLOW  = "\033[1;33m"
            ACES_BLUE    = "\033[1;34m"
            ACES_MAGENTA = "\033[1;35m"
            ACES_CYAN    = "\033[1;36m"
            ACES_GRAY    = "\033[90m"
            ACES_END     = "\033[0m"
        }
        
        tcpflag_colors["FIN"] = ACES_GREEN
        tcpflag_colors["SYN"] = ACES_CYAN
        tcpflag_colors["RST"] = ACES_RED
        tcpflag_colors["PSH"] = ACES_BOLD
        tcpflag_colors["ACK"] = ACES_GRAY
        tcpflag_colors["URG"] = ACES_MAGENTA
        tcpflag_colors["ECN"] = ACES_YELLOW
        tcpflag_colors["CWR"] = ACES_MAGENTA
        tcpflag_colors["NS"]  = ACES_YELLOW
        
        analysis_colors["ret"] = ACES_GREEN
        analysis_colors["fst"] = ACES_CYAN
        analysis_colors["spu"] = ACES_CYAN
        analysis_colors["dup"] = ACES_BLUE
        analysis_colors["out"] = ACES_BOLD
        analysis_colors["los"] = ACES_RED
        analysis_colors["alo"] = ACES_RED
        analysis_colors["ful"] = ACES_MAGENTA
        analysis_colors["wup"] = ACES_YELLOW
        analysis_colors["zro"] = ACES_BOLD
        analysis_colors["zrp"] = ACES_MAGENTA
        analysis_colors["zpa"] = ACES_YELLOW
        analysis_colors["kep"] = ACES_MAGENTA
        analysis_colors["kpa"] = ACES_YELLOW
        analysis_colors["tfo"] = ACES_BOLD
        analysis_colors["afo"] = ACES_MAGENTA
        analysis_colors["ifo"] = ACES_YELLOW
        analysis_colors["prt"] = ACES_BOLD
        
        if (analysis) {
            i = 0
            analysis_keys[i++] = "ret"
            analysis_keys[i++] = "fst"
            if (analysis_level >= 1)
                analysis_keys[i++] = "spu"
            analysis_keys[i++] = "dup"
            analysis_keys[i++] = "out"
            analysis_keys[i++] = "los"
            analysis_keys[i++] = "alo"
            analysis_keys[i++] = "ful"
            analysis_keys[i++] = "wup"
            analysis_keys[i++] = "zro"
            analysis_keys[i++] = "zrp"
            analysis_keys[i++] = "zpa"
            analysis_keys[i++] = "kep"
            analysis_keys[i++] = "kpa"
            if (analysis_level >= 2)
                analysis_keys[i++] = "tfo"
            if (analysis_level >= 3) {
                analysis_keys[i++] = "afo"
                analysis_keys[i++] = "ifo"
            }
            analysis_keys[i++] = "prt"
            analysis_num = i
        }
        
        months["Jan"] = 1
        months["Feb"] = 2
        months["Mar"] = 3
        months["Apr"] = 4
        months["May"] = 5
        months["Jun"] = 6
        months["Jul"] = 7
        months["Aug"] = 8
        months["Sep"] = 9
        months["Oct"] = 10
        months["Nov"] = 11
        months["Dec"] = 12
    };
    {
        e_index           = $1
        e_atime           = $2
        e_rtime           = $3
        e_srcport         = $4
        e_dstport         = $5
        e_icmptype        = $6
        e_icmptype6       = $7
        e_srcaddr         = last_value($8)
        e_dstaddr         = last_value($9)
        e_srcaddr6        = last_value($10)
        e_dstaddr6        = last_value($11)
        e_flags["fin"]    = $12
        e_flags["syn"]    = $13
        e_flags["reset"]  = $14
        e_flags["push"]   = $15
        e_flags["ack"]    = $16
        e_flags["urg"]    = $17
        e_flags["ecn"]    = $18
        e_flags["cwr"]    = $19
        e_flags["ns"]     = $20
        e_len             = $21
        if (analysis) {
            for (i = 0; i < analysis_num; i++) {
                key = analysis_keys[i]
                e_analysis[key] = $(22 + i)
            }
        }
        else if (custom) {
            if (custom_column == 0)
                custom_column = 22
            e_custom_val = $custom_column
        }
        else {
            e_protocol = $22
        }
        
        if (e_index == "" || e_icmptype != "" || e_icmptype6 != "")
            next
        if (e_index >= max_streams) {
            exceeded = 1
            next
        }
        
        if (!indexes[e_index]) {
            indexes[e_index] = 1
            streams[e_index, "atime"]       = e_atime
            streams[e_index, "rtime"]       = e_rtime
            streams[e_index, "srcport"]     = e_srcport
            streams[e_index, "dstport"]     = e_dstport
            streams[e_index, "srcaddr"]     = e_srcaddr
            streams[e_index, "dstaddr"]     = e_dstaddr
            streams[e_index, "srcaddr6"]    = e_srcaddr6
            streams[e_index, "dstaddr6"]    = e_dstaddr6
            streams[e_index, "flags_fin"]   = 0
            streams[e_index, "flags_syn"]   = 0
            streams[e_index, "flags_reset"] = 0
            streams[e_index, "flags_push"]  = 0
            streams[e_index, "flags_ack"]   = 0
            streams[e_index, "flags_urg"]   = 0
            streams[e_index, "flags_ecn"]   = 0
            streams[e_index, "flags_cwr"]   = 0
            streams[e_index, "flags_ns"]    = 0
            if (analysis) {
                for (i = 0; i < analysis_num; i++) {
                    key = analysis_keys[i]
                    streams[e_index, key] = 0
                }
            }
            else if (custom) {
                streams[e_index, "l_custom_cnt"] = 0
                streams[e_index, "r_custom_cnt"] = 0
                streams[e_index, "l_custom_sum"] = 0
                streams[e_index, "r_custom_sum"] = 0
                streams[e_index, "l_custom_min"] = 0
                streams[e_index, "r_custom_min"] = 0
                streams[e_index, "l_custom_max"] = 0
                streams[e_index, "r_custom_max"] = 0
            }
            else {
                streams[e_index, "protocol_1st"] = ""
                streams[e_index, "protocol_2nd"] = ""
                streams[e_index, "protocol_3rd"] = ""
                streams[e_index, "protocol_more"] = 0
            }
            streams[e_index, "l_packets"]    = 0
            streams[e_index, "r_packets"]    = 0
            streams[e_index, "l_bytes"]      = 0
            streams[e_index, "r_bytes"]      = 0
        }
        streams[e_index, "last_rtime"] = e_rtime
        
        reverse = 0
        if (e_srcport != streams[e_index, "srcport"] || e_srcaddr != streams[e_index, "srcaddr"] || e_srcaddr6 != streams[e_index, "srcaddr6"])
            reverse = 1
        
        if (e_flags["fin"]   != "" && e_flags["fin"]   != 0) streams[e_index, "flags_fin"]   = 1
        if (e_flags["syn"]   != "" && e_flags["syn"]   != 0) streams[e_index, "flags_syn"]   = 1
        if (e_flags["reset"] != "" && e_flags["reset"] != 0) streams[e_index, "flags_reset"] = 1
        if (e_flags["push"]  != "" && e_flags["push"]  != 0) streams[e_index, "flags_push"]  = 1
        if (e_flags["ack"]   != "" && e_flags["ack"]   != 0) streams[e_index, "flags_ack"]   = 1
        if (e_flags["urg"]   != "" && e_flags["urg"]   != 0) streams[e_index, "flags_urg"]   = 1
        if (e_flags["ecn"]   != "" && e_flags["ecn"]   != 0) streams[e_index, "flags_ecn"]   = 1
        if (e_flags["cwr"]   != "" && e_flags["cwr"]   != 0) streams[e_index, "flags_cwr"]   = 1
        if (e_flags["ns"]    != "" && e_flags["ns"]    != 0) streams[e_index, "flags_ns"]    = 1
        
        if (analysis) {
            for (i = 0; i < analysis_num; i++) {
                key = analysis_keys[i]
                if (e_analysis[key] != "" && e_analysis[key] != 0) streams[e_index, key]++
            }
        }
        else if (custom) {
            if (e_custom_val != "") {
                if (reverse) {
                    streams[e_index, "l_custom_cnt"]++
                    if (custom_ftype != 0) {
                        streams[e_index, "l_custom_sum"] += e_custom_val
                        if (streams[e_index, "l_custom_cnt"] == 1 || e_custom_val < streams[e_index, "l_custom_min"])
                            streams[e_index, "l_custom_min"] = e_custom_val
                        if (streams[e_index, "l_custom_cnt"] == 1 || e_custom_val > streams[e_index, "l_custom_max"])
                            streams[e_index, "l_custom_max"] = e_custom_val
                    }
                }
                else {
                    streams[e_index, "r_custom_cnt"]++
                    if (custom_ftype != 0) {
                        streams[e_index, "r_custom_sum"] += e_custom_val
                        if (streams[e_index, "r_custom_cnt"] == 1 || e_custom_val < streams[e_index, "r_custom_min"])
                            streams[e_index, "r_custom_min"] = e_custom_val
                        if (streams[e_index, "r_custom_cnt"] == 1 || e_custom_val > streams[e_index, "r_custom_max"])
                            streams[e_index, "r_custom_max"] = e_custom_val
                    }
                }
            }
        }
        else {
            if (e_protocol != "" && e_protocol != "TCP" && !streams[e_index, "protocol_more"]) {
                if (e_protocol != streams[e_index, "protocol_1st"] && e_protocol != streams[e_index, "protocol_2nd"] && e_protocol != streams[e_index, "protocol_3rd"]) {
                    if (streams[e_index, "protocol_1st"] == "")
                        streams[e_index, "protocol_1st"] = e_protocol
                    else if (streams[e_index, "protocol_2nd"] == "")
                        streams[e_index, "protocol_2nd"] = e_protocol
                    else if (streams[e_index, "protocol_3rd"] == "")
                        streams[e_index, "protocol_3rd"] = e_protocol
                    else
                        streams[e_index, "protocol_more"] = 1
                }
            }
        }
        if (reverse) {
            streams[e_index, "l_packets"]++
            streams[e_index, "l_bytes"] += e_len
        }
        else {
            streams[e_index, "r_packets"]++
            streams[e_index, "r_bytes"] += e_len
        }
    };
    END {
        num = 0
        if (descending)
            PROCINFO["sorted_in"] = "compare_streams";
        for (i in indexes) {
            if (!indexes[i])
                continue
            num++
            
            #### Index ####
            printf("%5d", i)
            
            #### TIME (0:a 1:ad 2:dd 3:e 4:r 5:rs) ####
            if (time_type == 0) {
                split(streams[i, "atime"], array1, " ")
                split(array1[4], array4, ":")
                printf("  %02d:%02d:%09.6f", array4[1], array4[2], array4[3])
            }
            else if (time_type == 1) {
                split(streams[i, "atime"], array1, " ")
                month_str = array1[1]
                if (index(array1[1], "\"") > 0) {
                    split(array1[1], array2, "\"")
                    month_str = array2[2]
                }
                split(array1[2], array3, ",")
                split(array1[4], array4, ":")
                printf("  %04d-%02d-%02d %02d:%02d:%09.6f", array1[3], months[month_str], array3[1], array4[1], array4[2], array4[3])
            }
            else
                printf("  %15.6f", streams[i, "rtime"])
            
            #### Src/Dst ADDRESS ####
            if (streams[i, "srcaddr6"] != "") {
                printf("  %s.%s %s<---->%s %s.%s\n", streams[i, "srcaddr6"], colored_port(streams[i, "srcport"]), ACES_GRAY, ACES_END, streams[i, "dstaddr6"], colored_port(streams[i, "dstport"]))
                printf("     ")
                if (time_type == 1)
                    printf("                            ")
                else
                    printf("                 ")
                if (streams[i, "srcaddr"] != "")
                    printf("  %15s       %s<---->%s %15s      ", streams[i, "srcaddr"], ACES_GRAY, ACES_END, streams[i, "dstaddr"])
                else
                    printf("                                                    ")
            }
            else {
                printf("  %15s:%s %s<---->%s %15s:%s", streams[i, "srcaddr"], colored_port(streams[i, "srcport"]), ACES_GRAY, ACES_END, streams[i, "dstaddr"], colored_port(streams[i, "dstport"]))
            }
            
            #### Duration ####
            printf("  %14.6f", streams[i, "last_rtime"] - streams[i, "rtime"])
            
            #### FLAGS ####
            printf("  [")
            if (streams[i, "flags_fin"])   printf("%sF%s", tcpflag_colors["FIN"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_syn"])   printf("%sS%s", tcpflag_colors["SYN"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_reset"]) printf("%sR%s", tcpflag_colors["RST"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_push"])  printf("%sP%s", tcpflag_colors["PSH"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_ack"])   printf("%sA%s", tcpflag_colors["ACK"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_urg"])   printf("%sU%s", tcpflag_colors["URG"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_ecn"])   printf("%sE%s", tcpflag_colors["ECN"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_cwr"])   printf("%sC%s", tcpflag_colors["CWR"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_ns"])    printf("%sN%s", tcpflag_colors["NS"],  ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            printf("]")
            
            if (analysis) {
                #### Analysis ####
                printf(" ")
                for (j = 0; j < analysis_num; j++) {
                    key = analysis_keys[j]
                    cnt = streams[i, key]
                    printf(" %s%4d%s", cnt > 0 ? analysis_colors[key] : ACES_GRAY, cnt, ACES_END)
                }
            }
            else if (custom) {
                #### Custom Statistics ####
                print_statistics(streams[i, "l_custom_cnt"], streams[i, "l_custom_sum"], streams[i, "l_custom_min"], streams[i, "l_custom_max"])
                print_statistics(streams[i, "r_custom_cnt"], streams[i, "r_custom_sum"], streams[i, "r_custom_min"], streams[i, "r_custom_max"])
            }
            else {
                #### Protocol ####
                protocol_label = streams[i, "protocol_1st"]
                if (streams[i, "protocol_2nd"] != "")
                    protocol_label = protocol_label ", " streams[i, "protocol_2nd"]
                if (streams[i, "protocol_3rd"] != "")
                    protocol_label = protocol_label ", " streams[i, "protocol_3rd"]
                if (streams[i, "protocol_more"])
                    protocol_label = protocol_label ", ..."
                if (length(protocol_label) > 26)
                    printf("  %s...", substr(protocol_label, 1, 24))
                else
                    printf("  %-26s", protocol_label)
                
                #### Packets Bytes ####
                print_traffic(streams[i, "l_packets"], streams[i, "l_bytes"])
                print_traffic(streams[i, "r_packets"], streams[i, "r_bytes"])
            }
            printf("\n")
        }
        if (num == 0) {
            printf("%sWARNING%s: No such TCP stream.\n", ACES_YELLOW, ACES_END) > "/dev/stderr"
            exit(1)
        }
        if (exceeded) {
            printf("%sWARNING%s: Too many TCP streams.\n", ACES_YELLOW, ACES_END) > "/dev/stderr"
            exit(1)
        }
        exit(0)
    } '
    
    return $?
}

#==============================================================================#
# Function: Analyzes end print packets for flow mode                           #
#==============================================================================#
tcp_stream_flow()
{
    "$AWK_COMMAND" -v os_type="$OS_TYPE"               \
                   -v infile="$FLAG_R"                 \
                   -v time_type="$TIME_TYPE"           \
                   -v invert="$FLAG_V"                 \
                   -v analysis="$FLAG_Z"               \
                   -v analysis_level="$ANALYSIS_LEVEL" \
                   -v protoinfo_length="$MAX_INFOLEN"  \
                   -v option="$FLAG_O"                 \
                   -v hexdump="$FLAG_X"                \
                   -v hexdump_length="$HEXDUMP_LENGTH" \
                   -v custom="$FLAG_F"                 \
                   -v custom_column="$CUSTOM_COLUMN"   \
                   -v custom2="$FLAG_F2"               \
                   -v custom_column2="$CUSTOM_COLUMN2" \
                   -v appearance="$APPEARANCE" '
    function last_value(e) {
        if (e == "")
            return ""
        array_num = split(e, array, ",")
        if (array_num == 0)
            return ""
        return array[array_num]
    }
    function ctoi(c) {
        if (c == "a" || c == "A")      return 10
        else if (c == "b" || c == "B") return 11
        else if (c == "c" || c == "C") return 12
        else if (c == "d" || c == "D") return 13
        else if (c == "e" || c == "E") return 14
        else if (c == "f" || c == "F") return 15
        else                           return int(c)
    }
    function dump_data(payload) {
        len = int(length(payload) / 2)
        if (hexdump_length != 0 && hexdump_length < len)
            len = hexdump_length
        i = 0
        while (i < len) {
            if (i > 0) {
                printf("\n")
                #### No. ####
                if (infile)
                    printf("          ")
                #### TIME (0:a 1:ad 2:dd 3:e 4:r 5:rs) ####
                if (time_type == 1)      printf("                          ")
                else if (time_type == 3) printf("                 ")
                else                     printf("               ")
                #### TCP flow (WINDOW Size, Src/Dst PORT, LENGTH) ####
                printf("                       %s|                 |%s                       ", ACES_BOLD, ACES_END)
                #### FLAGS ####
                printf("        ")
                #### SEQ/ACK Number ####
                printf("                              ")
                #### OPTION ####
                printf("        ")
                #### Analysis ####
                if (analysis) printf("          ")
            }
            printf("  %s%05d:%s ", ACES_GRAY, i, ACES_END)
            dump_str = ""
            ascii_str = "    "
            while (i < len) {
                hex_char1 = substr(payload, i * 2 + 1, 1)
                hex_char2 = substr(payload, i * 2 + 2, 1)
                dump_str = dump_str hex_char1 hex_char2
                dec = ctoi(hex_char1) * 16 + ctoi(hex_char2)
                if (dec >= 32 && dec <= 126)
                    ascii_str = ascii_str sprintf("%c", dec)
                else
                    ascii_str = ascii_str "."
                i++
                if (i >= len)
                    break
                if (i % 16 == 0)
                    break
                if (i % 8 == 0) {
                    ascii_str = ascii_str " "
                    dump_str = dump_str " "
                }
                if (i % 4 == 0)
                    dump_str = dump_str " "
            }
            if (i % 16 != 0) {
                j = 16 - (i % 16)
                blank_num = j * 2 + int(j / 4) + int(j / 8)
                while (blank_num > 0) {
                   dump_str = dump_str " "
                   blank_num--
                }
            }
            printf("%s%s%s%s", dump_str, ACES_GRAY, ascii_str, ACES_END)
        }
    }
    BEGIN {
        if (os_type == 3)
            RS = "\r\n"
        FS = "\t"
        analysis_num   = 0
        num            = 0
        first_srcport  = 0
        first_dstport  = 0
        first_srcaddr  = ""
        first_dstaddr  = ""
        first_srcaddr6 = ""
        first_rtime    = 0
        
        ### ANSI Color Escape Sequences ###
        if (appearance == 0) {
            ACES_BOLD    = ""
            ACES_RED     = ""
            ACES_GREEN   = ""
            ACES_YELLOW  = ""
            ACES_BLUE    = ""
            ACES_MAGENTA = ""
            ACES_CYAN    = ""
            ACES_GRAY    = ""
            ACES_END     = ""
        }
        else if (appearance == 1) {
            ACES_BOLD    = "\033[1;97m"
            ACES_RED     = "\033[1;91m"
            ACES_GREEN   = "\033[1;92m"
            ACES_YELLOW  = "\033[1;93m"
            ACES_BLUE    = "\033[1;94m"
            ACES_MAGENTA = "\033[1;95m"
            ACES_CYAN    = "\033[1;96m"
            ACES_GRAY    = "\033[37m"
            ACES_END     = "\033[0m"
        }
        else {
            ACES_BOLD    = "\033[1;30m"
            ACES_RED     = "\033[1;31m"
            ACES_GREEN   = "\033[1;32m"
            ACES_YELLOW  = "\033[1;33m"
            ACES_BLUE    = "\033[1;34m"
            ACES_MAGENTA = "\033[1;35m"
            ACES_CYAN    = "\033[1;36m"
            ACES_GRAY    = "\033[90m"
            ACES_END     = "\033[0m"
        }
        
        tcpflag_colors["FIN"] = ACES_GREEN
        tcpflag_colors["SYN"] = ACES_CYAN
        tcpflag_colors["RST"] = ACES_RED
        tcpflag_colors["PSH"] = ACES_BOLD
        tcpflag_colors["ACK"] = ACES_GRAY
        tcpflag_colors["URG"] = ACES_MAGENTA
        tcpflag_colors["ECN"] = ACES_YELLOW
        tcpflag_colors["CWR"] = ACES_MAGENTA
        tcpflag_colors["NS"]  = ACES_YELLOW
        
        option_colors["E"] = ACES_GRAY
        option_colors["N"] = ACES_GRAY
        option_colors["m"] = ACES_GREEN
        option_colors["w"] = ACES_YELLOW
        option_colors["S"] = ACES_CYAN
        option_colors["s"] = ACES_CYAN
        option_colors["t"] = ACES_BOLD
        option_colors["O"] = ACES_RED
        
        analysis_colors["ret"] = ACES_GREEN
        analysis_colors["fst"] = ACES_CYAN
        analysis_colors["spu"] = ACES_CYAN
        analysis_colors["dup"] = ACES_BLUE
        analysis_colors["out"] = ACES_BOLD
        analysis_colors["los"] = ACES_RED
        analysis_colors["alo"] = ACES_RED
        analysis_colors["ful"] = ACES_MAGENTA
        analysis_colors["wup"] = ACES_YELLOW
        analysis_colors["zro"] = ACES_BOLD
        analysis_colors["zrp"] = ACES_MAGENTA
        analysis_colors["zpa"] = ACES_YELLOW
        analysis_colors["kep"] = ACES_MAGENTA
        analysis_colors["kpa"] = ACES_YELLOW
        analysis_colors["tfo"] = ACES_BOLD
        analysis_colors["afo"] = ACES_MAGENTA
        analysis_colors["ifo"] = ACES_YELLOW
        analysis_colors["prt"] = ACES_BOLD
        
        if (analysis) {
            i = 0
            analysis_keys[i++] = "ret"
            analysis_keys[i++] = "fst"
            if (analysis_level >= 1)
                analysis_keys[i++] = "spu"
            analysis_keys[i++] = "dup"
            analysis_keys[i++] = "out"
            analysis_keys[i++] = "los"
            analysis_keys[i++] = "alo"
            analysis_keys[i++] = "ful"
            analysis_keys[i++] = "wup"
            analysis_keys[i++] = "zro"
            analysis_keys[i++] = "zrp"
            analysis_keys[i++] = "zpa"
            analysis_keys[i++] = "kep"
            analysis_keys[i++] = "kpa"
            if (analysis_level >= 2)
                analysis_keys[i++] = "tfo"
            if (analysis_level >= 3) {
                analysis_keys[i++] = "afo"
                analysis_keys[i++] = "ifo"
            }
            analysis_keys[i++] = "prt"
            analysis_num = i
        }
        
        months["Jan"] = 1
        months["Feb"] = 2
        months["Mar"] = 3
        months["Apr"] = 4
        months["May"] = 5
        months["Jun"] = 6
        months["Jul"] = 7
        months["Aug"] = 8
        months["Sep"] = 9
        months["Oct"] = 10
        months["Nov"] = 11
        months["Dec"] = 12
    };
    {
        e_number              = $1
        e_time                = $2
        e_srcport             = $3
        e_dstport             = $4
        e_icmptype            = $5
        e_icmptype6           = $6
        e_srcaddr             = last_value($7)
        e_dstaddr             = last_value($8)
        e_srcaddr6            = last_value($9)
        e_dstaddr6            = last_value($10)
        e_flags["fin"]        = $11
        e_flags["syn"]        = $12
        e_flags["reset"]      = $13
        e_flags["push"]       = $14
        e_flags["ack"]        = $15
        e_flags["urg"]        = $16
        e_flags["ecn"]        = $17
        e_flags["cwr"]        = $18
        e_flags["ns"]         = $19
        e_seq                 = $20
        e_ack                 = $21
        e_window_size         = $22
        e_len                 = $23
        e_option_kind         = $24
        if (analysis) {
            for (i = 0; i < analysis_num; i++) {
                key = analysis_keys[i]
                e_analysis[key] = $(25 + i)
            }
        }
        if (option) {
            e_options["mss"]      = $(25 + analysis_num)
            e_options["ws_shift"] = $(26 + analysis_num)
            e_options["ws_multi"] = $(27 + analysis_num)
            e_options["sack_cnt"] = $(28 + analysis_num)
            e_options["sack_le"]  = $(29 + analysis_num)
            e_options["sack_re"]  = $(30 + analysis_num)
            e_options["ts_val"]   = $(31 + analysis_num)
            e_options["ts_ecr"]   = $(32 + analysis_num)
        }
        else if (hexdump) {
            e_payload = $(25 + analysis_num)
        }
        else if (custom) {
            if (custom2) {
                if (custom_column2 == 0) {
                    if (custom_column == 0)
                        custom_column2 = 26 + analysis_num
                    else
                        custom_column2 = 25 + analysis_num
                }
                e_custom_val2 = $custom_column2
            }
            if (custom_column == 0)
                custom_column = 25 + analysis_num
            e_custom_val = $custom_column
        }
        else {
            e_protocol    = $(25 + analysis_num)
            e_information = $(26 + analysis_num)
        }
        
        #### Checks protocol, ports, IP addresses, and direction ####
        reverse = 0
        icmp = 0
        if (e_icmptype != "") {
            icmp = 1
            if (num == 0 || e_srcport == "" || e_dstport == "" || e_srcaddr == "" || e_dstaddr == "")
                next
            else if (e_srcport == first_srcport && e_dstport == first_dstport && e_srcaddr == first_srcaddr && e_dstaddr == first_dstaddr)
                reverse = 1
            else if (e_srcport == first_dstport && e_dstport == first_srcport && e_srcaddr == first_dstaddr && e_dstaddr == first_srcaddr)
                reverse = 0
            else
                next
        }
        else if (e_icmptype6 != "") {
            icmp = 1
            if (num == 0 || e_srcport == "" || e_dstport == "" || e_srcaddr6 == "" || e_dstaddr6 == "")
                next
            else if (e_srcport == first_srcport && e_dstport == first_dstport && e_srcaddr6 == first_srcaddr6 && e_dstaddr6 == first_dstaddr6)
                reverse = 1
            else if (e_srcport == first_dstport && e_dstport == first_srcport && e_srcaddr6 == first_dstaddr6 && e_dstaddr6 == first_srcaddr6)
                reverse = 0
            else
                next
        }
        else {
            if (num == 0) {
                first_srcport  = e_srcport
                first_dstport  = e_dstport
                first_srcaddr  = e_srcaddr
                first_dstaddr  = e_dstaddr
                first_srcaddr6 = e_srcaddr6
                first_dstaddr6 = e_dstaddr6
                first_rtime    = e_time
            }
            num++
            if (e_srcport != first_srcport || e_srcaddr != first_srcaddr || e_srcaddr6 != first_srcaddr6)
                reverse = 1
        }
        if (invert) {
            if (reverse)
                reverse = 0
            else
                reverse = 1
        }
        
        #### No. ####
        if (infile)
            printf("%8d  ", e_number)
        
        #### TIME (0:a 1:ad 2:dd 3:e 4:r 5:rs) ####
        if (time_type == 0) {
            split(e_time, array1, " ")
            split(array1[4], array4, ":")
            printf("%02d:%02d:%09.6f", array4[1], array4[2], array4[3])
        }
        else if (time_type == 1) {
            split(e_time, array1, " ")
            month_str = array1[1]
            if (index(array1[1], "\"") > 0) {
                split(array1[1], array2, "\"")
                month_str = array2[2]
            }
            split(array1[2], array3, ",")
            split(array1[4], array4, ":")
            printf("%04d-%02d-%02d %02d:%02d:%09.6f", array1[3], months[month_str], array3[1], array4[1], array4[2], array4[3])
        }
        else if (time_type == 3) {
            printf("%17.6f", e_time)
        }
        else if (time_type == 5) {
            printf("%15.6f", e_time - first_rtime)
        }
        else {
            printf("%15.6f", e_time)
        }
        
        #### TCP flow (WINDOW Size, Src/Dst PORT, LENGTH) ####
        window_label = "[Win=" e_window_size "]"
        dstport_label = "(" e_dstport ")"
        srcport_label = "(" e_srcport ")"
        if (e_len == "")       len_label = "-----"
        else if (e_len > 9999) len_label = e_len
        else if (e_len > 999)  len_label = "-" e_len
        else if (e_len > 99)   len_label = "--" e_len
        else if (e_len > 9)    len_label = "---" e_len
        else if (e_len > 0)    len_label = "----" e_len
        else                   len_label = "-----"
        
        if (icmp) {
            printf("                       ")
            if (reverse)
                printf("%s|%s%s<---------       %s%s|%s", ACES_BOLD, ACES_END, ACES_BLUE, ACES_END, ACES_BOLD, ACES_END)
            else
                printf("%s|       --------->|%s", ACES_BOLD, ACES_END)
            printf("                       ")
        }
        else if (reverse) {
            printf("%s%23s%s", ACES_GRAY, dstport_label, ACES_END)
            printf("%s|%s%s<----%s-------%s%s|%s", ACES_BOLD, ACES_END, ACES_BLUE, len_label, ACES_END, ACES_BOLD, ACES_END)
            if (e_srcport > 9999)     printf("%s%s%s%-16s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else if (e_srcport > 999) printf("%s%s%s%-17s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else if (e_srcport > 99)  printf("%s%s%s%-18s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else if (e_srcport > 9)   printf("%s%s%s%-19s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else                      printf("%s%s%s%-20s", ACES_GRAY, srcport_label, ACES_END, window_label)
        }
        else {
            if (e_srcport > 9999)     printf("%16s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else if (e_srcport > 999) printf("%17s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else if (e_srcport > 99)  printf("%18s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else if (e_srcport > 9)   printf("%19s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else                      printf("%20s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            printf("%s|-----%s------>|%s", ACES_BOLD, len_label, ACES_END)
            printf("%s%-23s%s", ACES_GRAY, dstport_label, ACES_END)
        }
        
        #### FLAGS ####
        cnt = 0
        flags_label = "["
        if (e_flags["fin"]   != "" && e_flags["fin"]   != 0) { cnt++; flags_label = flags_label tcpflag_colors["FIN"] "F" ACES_END }
        if (e_flags["syn"]   != "" && e_flags["syn"]   != 0) { cnt++; flags_label = flags_label tcpflag_colors["SYN"] "S" ACES_END }
        if (e_flags["reset"] != "" && e_flags["reset"] != 0) { cnt++; flags_label = flags_label tcpflag_colors["RST"] "R" ACES_END }
        if (e_flags["push"]  != "" && e_flags["push"]  != 0) { cnt++; flags_label = flags_label tcpflag_colors["PSH"] "P" ACES_END }
        if (e_flags["ack"]   != "" && e_flags["ack"]   != 0) { cnt++; flags_label = flags_label tcpflag_colors["ACK"] "A" ACES_END }
        if (e_flags["urg"]   != "" && e_flags["urg"]   != 0) { cnt++; flags_label = flags_label tcpflag_colors["URG"] "U" ACES_END }
        if (e_flags["ecn"]   != "" && e_flags["ecn"]   != 0) { cnt++; flags_label = flags_label tcpflag_colors["ECN"] "E" ACES_END }
        if (e_flags["cwr"]   != "" && e_flags["cwr"]   != 0) { cnt++; flags_label = flags_label tcpflag_colors["CWR"] "C" ACES_END }
        if (e_flags["ns"]    != "" && e_flags["ns"]    != 0) { cnt++; flags_label = flags_label tcpflag_colors["NS"]  "N" ACES_END }
        if (cnt == 0)      flags_label = flags_label "]      "
        else if (cnt == 1) flags_label = flags_label "]     "
        else if (cnt == 2) flags_label = flags_label "]    "
        else if (cnt == 3) flags_label = flags_label "]   "
        else if (cnt == 4) flags_label = flags_label "]  "
        else if (cnt == 5) flags_label = flags_label "] "
        else               flags_label = flags_label "]"
        
        if (icmp)
            printf("        ")
        else
            printf("%s", flags_label)
        
        #### SEQ/ACK Number ####
        if (icmp) {
            printf("                              ")
        }
        else if (reverse) {
            if (e_flags["ack"] == "" || e_flags["ack"] == 0 || e_ack == "")
                printf("              ")
            else
                printf("Ack=%-10u", e_ack)
            if (e_seq == "")
                printf("                ")
            else
                printf("  Seq=%-10u", e_seq)
        }
        else {
            if (e_seq == "")
                printf("              ")
            else
                printf("Seq=%-10u", e_seq)
            if (e_flags["ack"] == "" || e_flags["ack"] == 0 || e_ack == "")
                printf("                ")
            else
                printf("  Ack=%-10u", e_ack)
        }
        
        #### OPTION ####
        optset["E"] = 0  # End of Option List (EOL)
        optset["N"] = 0  # No-Operation (NOP)
        optset["m"] = 0  # Maximum segment size
        optset["w"] = 0  # Window scale
        optset["S"] = 0  # SACK permitted
        optset["s"] = 0  # SACK
        optset["t"] = 0  # Timestamps
        optset["O"] = 0  # Other
        other_kinds        = ""
        opt_num = split(e_option_kind, array3, ",")
        for (i = 1; i <= opt_num; i++) {
            if (array3[i] == "0")      optset["E"] = 1
            else if (array3[i] == "1") optset["N"] = 1
            else if (array3[i] == "2") optset["m"] = 1
            else if (array3[i] == "3") optset["w"] = 1
            else if (array3[i] == "4") optset["S"] = 1
            else if (array3[i] == "5") optset["s"] = 1
            else if (array3[i] == "8") optset["t"] = 1
            else {
                if (!optset["O"])
                    other_kinds = array3[i]
                else
                    other_kinds = other_kinds "," array3[i]
                optset["O"] = 1
            }
        }
        opt_label = ""
        split("m w S s t O", array, " ")
        for (i in array) {
            key = array[i]
            if (optset[key])
                opt_label = opt_label option_colors[key] key ACES_END
            else
                opt_label = opt_label ACES_GRAY "-" ACES_END
        }
        if (icmp)
            printf("        ")
        else
            printf("  %s", opt_label)
        
        #### Analysis ####
        if (analysis) {
            printf("  ")
            cnt = 0
            for (i = 0; i < analysis_num; i++) {
                key = analysis_keys[i]
                if (e_analysis[key] != "" && e_analysis[key] != 0) {
                    if (cnt > 0)
                        printf("%s,%s", ACES_GRAY, ACES_END)
                    printf("%s%s%s", analysis_colors[key], key, ACES_END)
                    cnt++
                }
            }
            if (cnt == 0)      printf("        ")
            else if (cnt == 1) printf("     ")
            else if (cnt == 2) printf(" ")
        }
        
        if (option) {
            #### Option VALUES ####
            printf("  ")
            if (optset["m"]) printf("MSS=%d ", e_options["mss"])
            if (optset["w"]) printf("WS=%d(%d) ", e_options["ws_shift"], e_options["ws_multi"])
            if (optset["S"]) printf("SACK_PERM=1 ")
            if (optset["s"]) printf("SLE=%u SRE=%u ", e_options["sack_le"], e_options["sack_re"])
            if (optset["t"]) {
                if (reverse == 0)
                    printf("TSval=%d TSecr=%d ", e_options["ts_val"], e_options["ts_ecr"])
                else
                    printf("TSecr=%d TSval=%d ", e_options["ts_ecr"], e_options["ts_val"])
            }
            if (optset["O"]) printf("OTHER(kind:%s)", other_kinds)
        }
        else if (hexdump) {
            #### Payload DATA ####
            gsub(":", "", e_payload)  # for wireshark 2.x
            dump_data(e_payload)
        }
        else if (custom) {
            #### Custom VALUE ####
            printf("  %s", e_custom_val)
            if (custom2 && e_custom_val2 != "")
                printf(" %s(%s%s%s)%s", ACES_GRAY, ACES_END, e_custom_val2, ACES_GRAY, ACES_END)
        }
        else {
            #### Protocol Information ####
            if (e_protocol != "TCP") {
                if (icmp)
                    printf("  %s%-10s%s", ACES_GRAY, e_protocol, ACES_END)
                else
                    printf("  %-10s", e_protocol)
                protocol_information = e_information
                if (protoinfo_length > 0 && length(e_information) > protoinfo_length)
                    protocol_information = substr(e_information, 1, protoinfo_length) "..."
                printf("  %s", protocol_information)
            }
        }
        printf("\n")
    };
    END {
        exit(0)
    } '
    
    return $?
}

#==============================================================================#
# Function: Analyzes and print a packet for one mode                           #
#==============================================================================#
tcp_stream_one()
{
    "$AWK_COMMAND" -v os_type="$OS_TYPE" \
                   -v entire="$FLAG_E"   \
                   -v appearance="$APPEARANCE" '
    BEGIN {
        if (os_type == 3)
            RS = "\r\n"
        line_num = 0
        is_tcp_header = 0
        is_data_header = 0
        
        ### ANSI Color Escape Sequences ###
        if (appearance == 0) {
            ACES_BGGRAY  = ""
            ACES_BOLD    = ""
            ACES_RED     = ""
            ACES_GREEN   = ""
            ACES_YELLOW  = ""
            ACES_BLUE    = ""
            ACES_MAGENTA = ""
            ACES_CYAN    = ""
            ACES_GRAY    = ""
            ACES_END     = ""
        }
        else if (appearance == 1) {
            ACES_BGGRAY  = "\033[7m"
            ACES_BOLD    = "\033[1;97m"
            ACES_RED     = "\033[1;91m"
            ACES_GREEN   = "\033[1;92m"
            ACES_YELLOW  = "\033[1;93m"
            ACES_BLUE    = "\033[1;94m"
            ACES_MAGENTA = "\033[1;95m"
            ACES_CYAN    = "\033[1;96m"
            ACES_GRAY    = "\033[37m"
            ACES_END     = "\033[0m"
        }
        else {
            ACES_BGGRAY  = "\033[7m"
            ACES_BOLD    = "\033[1;30m"
            ACES_RED     = "\033[1;31m"
            ACES_GREEN   = "\033[1;32m"
            ACES_YELLOW  = "\033[1;33m"
            ACES_BLUE    = "\033[1;34m"
            ACES_MAGENTA = "\033[1;35m"
            ACES_CYAN    = "\033[1;36m"
            ACES_GRAY    = "\033[90m"
            ACES_END     = "\033[0m"
        }
        
        data_label        = "Data ("
        tcp_label         = "Transmission Control Protocol"
        tcp_label_index   = "    [Stream index: "
        tcp_label_flags   = "    Flags: "
        tcp_label_len     = "    [TCP Segment Len: "
        tcp_label_options = "    Options: "
        
        tcpflag_colors["FIN"] = ACES_GREEN
        tcpflag_colors["SYN"] = ACES_CYAN
        tcpflag_colors["RST"] = ACES_RED
        tcpflag_colors["PSH"] = ACES_BOLD
        tcpflag_colors["ACK"] = ACES_GRAY
        tcpflag_colors["URG"] = ACES_MAGENTA
        tcpflag_colors["ECN"] = ACES_YELLOW
        tcpflag_colors["ECE"] = ACES_YELLOW  # for Wireshark 4.0.0 or newer
        tcpflag_colors["CWR"] = ACES_MAGENTA
        tcpflag_colors["NS"]  = ACES_YELLOW
        tcpflag_colors["AE"]  = ACES_YELLOW  # for Wireshark 4.0.0 or newer
        
        option_colors["End of Option List (EOL)"] = ACES_GRAY
        option_colors["No-Operation (NOP)"]       = ACES_GRAY
        option_colors["Maximum segment size"]     = ACES_GREEN
        option_colors["Window scale"]             = ACES_YELLOW
        option_colors["SACK permitted"]           = ACES_CYAN
        option_colors["SACK"]                     = ACES_CYAN
        option_colors["Timestamps"]               = ACES_BOLD
        
        analysis_msgs["ret"] = "This frame is a (suspected) retransmission"
        analysis_msgs["fst"] = "This frame is a (suspected) fast retransmission"
        analysis_msgs["spu"] = "This frame is a (suspected) spurious retransmission"
        analysis_msgs["dup"] = "Duplicate ACK"
        analysis_msgs["out"] = "This frame is a (suspected) out-of-order segment"
        analysis_msgs["los"] = "Previous segment(s) not captured (common at capture start)"
        analysis_msgs["alo"] = "ACKed segment that wasn\047t captured (common at capture start)"
        analysis_msgs["ful"] = "TCP window specified by the receiver is now completely full"
        analysis_msgs["wup"] = "TCP window update"
        analysis_msgs["zro"] = "TCP Zero Window segment"
        analysis_msgs["zrp"] = "TCP Zero Window Probe"
        analysis_msgs["zpa"] = "ACK to a TCP Zero Window Probe"
        analysis_msgs["kep"] = "TCP keep-alive segment"
        analysis_msgs["kpa"] = "ACK to a TCP keep-alive segment"
        analysis_msgs["tfo"] = "TCP SYN with TFO Cookie"
        analysis_msgs["afo"] = "TCP SYN-ACK accepting TFO data"
        analysis_msgs["ifo"] = "TCP SYN-ACK ignoring TFO data"
        analysis_msgs["prt"] = "A new tcp session is started with the same ports as an earlier session in this trace"
        
        analysis_colors["ret"] = ACES_GREEN
        analysis_colors["fst"] = ACES_CYAN
        analysis_colors["spu"] = ACES_CYAN
        analysis_colors["dup"] = ACES_BLUE
        analysis_colors["out"] = ACES_BOLD
        analysis_colors["los"] = ACES_RED
        analysis_colors["alo"] = ACES_RED
        analysis_colors["ful"] = ACES_MAGENTA
        analysis_colors["wup"] = ACES_YELLOW
        analysis_colors["zro"] = ACES_BOLD
        analysis_colors["zrp"] = ACES_MAGENTA
        analysis_colors["zpa"] = ACES_YELLOW
        analysis_colors["kep"] = ACES_MAGENTA
        analysis_colors["kpa"] = ACES_YELLOW
        analysis_colors["tfo"] = ACES_BOLD
        analysis_colors["afo"] = ACES_MAGENTA
        analysis_colors["ifo"] = ACES_YELLOW
        analysis_colors["prt"] = ACES_BOLD
    };
    {
        line = $0
        len = length(line)
        
        ### Skips blank line without -e option ###
        if (len == 0) {
            if (entire)
                printf("\n")
            next
        }
        line_num++
        
        ### Checks and highlights top-level line ###
        if (substr(line, 1, 1) != " ") {
            if (is_data) {
                if (entire)
                    printf("%s\n", line)
                next
            }
            is_tcp  = 0
            is_data = 0
            if (index(line, tcp_label) == 1)
                is_tcp = 1
            if (index(line, data_label) == 1)
                is_data = 1
            printf("%s%s %s\n", ACES_BGGRAY, line, ACES_END)
            next
        }
        
        ### Skips ancillary information without -e option ###
        if (!entire) {
            if (substr(line, 1, 12) == "            ")
                next
            if (substr(line, 1, 8) == "        ") {
                if (len < 9 || index("[.01", substr(line, 9, 1)) > 0)
                    next
            }
            if (substr(line, 1, 4) == "    ") {
                if (len < 5 || substr(line, 5, 1) == "[")
                    next
            }
        }
        
        ### Colors some TCP headers ###
        if (is_tcp) {
            ### Flags: ###
            ptr = index(line, "(")
            if (index(line, tcp_label_flags) == 1 && ptr > 0 && substr(line, len, 1) == ")") {
                printf("%s", substr(line, 1, ptr))
                array_num = split(substr(line, ptr + 1, len - ptr -1), array, ", ")
                for (i = 1; i <= array_num; i++) {
                    if (i > 1)
                        printf(", ")
                    flag = array[i]
                    printf("%s%s%s", flag in tcpflag_colors ? tcpflag_colors[flag] : ACES_RED, flag, ACES_END)
                }
                printf(")\n")
                next
            }
            
            ### Options: ###
            ptr = index(line, "), ")
            if (index(line, tcp_label_options) == 1 && ptr > 0) {
                printf("%s", substr(line, 1, ptr + 2))
                array_num = split(substr(line, ptr + 3), array, ", ")
                for (i = 1; i <= array_num; i++) {
                    if (i > 1)
                        printf(", ")
                    option = array[i]
                    printf("%s%s%s", option in option_colors ? option_colors[option] : ACES_RED, option, ACES_END)
                }
                printf("\n")
                next
            }
            
            ### [TCP Segment Len: XXX] ###
            ptr = index(line, tcp_label_len)
            if (ptr > 0) {
                ptr += length(tcp_label_len)
                len_len = length(line) - ptr
                printf("%s%s%s%s%s%s%s]%s\n", ACES_GRAY, substr(line, 1, ptr - 1), ACES_END, ACES_BOLD, substr(line, ptr, len_len), ACES_END, ACES_GRAY, ACES_END)
                next
            }
            
            ### [Stream index: XXX] ###
            ptr = index(line, tcp_label_index)
            if (ptr > 0) {
                ptr += length(tcp_label_index)
                len_len = length(line) - ptr
                printf("%s%s%s%s%s%s%s]%s\n", ACES_GRAY, substr(line, 1, ptr - 1), ACES_END, ACES_BOLD, substr(line, ptr, len_len), ACES_END, ACES_GRAY, ACES_END)
                next
            }
            
            ### Analysis ###
            for (key in analysis_msgs) {
                ptr = index(line, "[" analysis_msgs[key] "]")
                if (ptr > 0) {
                   msg_len = length(analysis_msgs[key])
                   printf("%s%s%s%s%s%s%s]%s\n", ACES_GRAY, substr(line, 1, ptr), ACES_END, analysis_colors[key], substr(line, ptr + 1, msg_len), ACES_END, ACES_GRAY, ACES_END)
                   next
                }
            }
        }
        
        ### Grays out ancillary information ###
        if (substr(line, 1, 12) == "            ") {
            printf("%s%s%s\n", ACES_GRAY, line, ACES_END)
            next
        }
        if (substr(line, 1, 8) == "        ") {
            if (len < 9 || index("[.01", substr(line, 9, 1)) > 0) {
                printf("%s%s%s\n", ACES_GRAY, line, ACES_END)
                next
            }
        }
        if (substr(line, 1, 4) == "    ") {
            if (len < 5 || substr(line, 5, 1) == "[") {
                printf("%s%s%s\n", ACES_GRAY, line, ACES_END)
                next
            }
        }
        ptr = index(line, "[")
        if (ptr > 0) {
            printf("%s%s%s%s\n", substr(line, 1, ptr - 1), ACES_GRAY, substr(line, ptr), ACES_END)
            next
        }
        
        ### Prints as is ###
        printf("%s\n", line)
    };
    END {
        if (line_num == 0) {
            printf("%sWARNING%s: No such packet.\n", ACES_YELLOW, ACES_END) > "/dev/stderr"
            exit(1)
        }
        exit(0)
    } '
    
    return $?
}

#==============================================================================#
# Function: Prints a hex dump of packet data for one mode                      #
#                                                                              #
#  e.g. tshark -x format                                                       #
#             1         2         3         4         5         6         7    #  
#   123456789012345678901234567890123456789012345678901234567890123456789012   #
#   0000  1a 3e ef 2c 65 64 ca 58 d2 77 8d 9a 08 00 45 12   .>.,ed.X.w....E.   #
#==============================================================================#
tcp_stream_one_hex()
{
    "$AWK_COMMAND" -v os_type="$OS_TYPE" \
                   -v appearance="$APPEARANCE" '
    BEGIN {
        if (os_type == 3)
            RS = "\r\n"
        line_num = 0
        
        ### ANSI Color Escape Sequences ###
        if (appearance == 0) {
            ACES_BGGRAY  = ""
            ACES_BOLD    = ""
            ACES_RED     = ""
            ACES_GREEN   = ""
            ACES_YELLOW  = ""
            ACES_BLUE    = ""
            ACES_MAGENTA = ""
            ACES_CYAN    = ""
            ACES_GRAY    = ""
            ACES_END     = ""
        }
        else if (appearance == 1) {
            ACES_BGGRAY  = "\033[7m"
            ACES_BOLD    = "\033[1;97m"
            ACES_RED     = "\033[1;91m"
            ACES_GREEN   = "\033[1;92m"
            ACES_YELLOW  = "\033[1;93m"
            ACES_BLUE    = "\033[1;94m"
            ACES_MAGENTA = "\033[1;95m"
            ACES_CYAN    = "\033[1;96m"
            ACES_GRAY    = "\033[37m"
            ACES_END     = "\033[0m"
        }
        else {
            ACES_BGGRAY  = "\033[7m"
            ACES_BOLD    = "\033[1;30m"
            ACES_RED     = "\033[1;31m"
            ACES_GREEN   = "\033[1;32m"
            ACES_YELLOW  = "\033[1;33m"
            ACES_BLUE    = "\033[1;34m"
            ACES_MAGENTA = "\033[1;35m"
            ACES_CYAN    = "\033[1;36m"
            ACES_GRAY    = "\033[90m"
            ACES_END     = "\033[0m"
        }
    }
    {
        line = $0
        len = length(line)
        
        if (len < 57) {
            printf("\n")
            next
        }
        line_num++
        
        printf("%s%05d:%s ", ACES_GRAY, strtonum("0x" substr(line, 1, 4)), ACES_END)
        for (i = 0; i < 4; i++)
            printf("%s", substr(line, i * 3 + 7, 2))
        printf(" ")
        for (i = 0; i < 4; i++)
            printf("%s", substr(line, i * 3 + 19, 2))
        printf("  ")
        for (i = 0; i < 4; i++)
            printf("%s", substr(line, i * 3 + 31, 2))
        printf(" ")
        for (i = 0; i < 4; i++)
            printf("%s", substr(line, i * 3 + 43, 2))
        printf("    ")
        if (len <= 64)
            printf("%s%s%s", ACES_GRAY, substr(line, 57), ACES_END)
        else
            printf("%s%s %s%s", ACES_GRAY, substr(line, 57, 8), substr(line, 65), ACES_END)
        printf("\n")
    };
    END {
        if (line_num == 0) {
            printf("%sWARNING%s: No such packet.\n", ACES_YELLOW, ACES_END) > "/dev/stderr"
            exit(1)
        }
        exit(0)
    } '
    
    return $?
}

#==============================================================================#
# Global variables                                                             #
#==============================================================================#
OS_TYPE=0                       # 0:Linux, 1:SunOS, 2:Darwin, 3:Cygwin
APPEARANCE=$APPEARANCE_DEFAULT  # 0:Mono, 1:Dark, 2:Light
RUN_MODE=0                      # 0:List, 1:Flow, 2:Flow(Live), 3:One

PRE_COMMAND=""
TSHARK_COMMAND="tshark"
AWK_COMMAND="awk"
GREP_COMMAND="grep"
MAX_STREAMS=$MAX_STREAMS_DEFAULT
MAX_INFOLEN=$MAX_INFOLEN_DEFAULT

FLAG_H=0
FLAG_4=0
FLAG_6=0
FLAG_D=0
FLAG_V=0
FLAG_W=0
FLAG_Q=0
FLAG_Z=0
FLAG_R=0
FLAG_I=0
FLAG_S=0
FLAG_T=0
FLAG_P=0
FLAG_A=0
FLAG_O=0
FLAG_X=0
FLAG_XX=0
FLAG_F=0
FLAG_F2=0
FLAG_N=0
FLAG_E=0

HEXDUMP_LENGTH=0
ANALYSIS_LEVEL=0
DISPLAY_VENDOR=0          # 0:False, 1:True(resolved vender name is displayed)
TSHARK_INFILE=""
TSHARK_INTERFACE=""
TSHARK_FILTER=""
TSHARK_CAPTURE_FILTER=""
TSHARK_FIELDS=""
TSHARK_FIND_OPTIONS=""
TSHARK_MAIN_OPTIONS=""
CUSTOM_FIELD=""
CUSTOM_FIELD2=""
CUSTOM_FTYPE=0            # 0:ohter, 1:integer, 2:float
CUSTOM_COLUMN=0
CUSTOM_COLUMN2=0
TIME_TYPE=0               # 0:a, 1:ad, 2:dd, 3:e, 4:r, 5:rs
FILTER_PORT=0
FILTER_ADDR=""
STREAM_INDEX=0
FRAME_NUMBER=0

#==============================================================================#
# Checks OS type                                                               #
#==============================================================================#
platform=`uname -s`
case $platform in
    Linux*)
        OS_TYPE=0
        ;;
    SunOS*)
        OS_TYPE=1
        which gawk > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            AWK_COMMAND="gawk"
        else
            which nawk > /dev/null 2>&1
            if [ $? -eq 0 ]; then
                AWK_COMMAND="nawk"
            fi
        fi
        which ggrep > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            GREP_COMMAND="ggrep"
        else
            if [ -x "/usr/xpg4/bin/grep" ]; then
                GREP_COMMAND="/usr/xpg4/bin/grep"
            fi
        fi
        ;;
    Darwin*)
        OS_TYPE=2
        ;;
    CYGWIN*)
        OS_TYPE=3
        ;;
    *)
        printf "${ACES_RED}ERROR${ACES_END}: platform not supported (${platform}).\n" 1>&2
        exit 1
        ;;
esac

#==============================================================================#
# Sets ANSI color escape sequences                                             #
#==============================================================================#
ACES_BOLD=""
ACES_RED=""
ACES_GREEN=""
ACES_YELLOW=""
ACES_BLUE=""
ACES_MAGENTA=""
ACES_CYAN=""
ACES_GRAY=""
ACES_END=""
if [ -n "$TCPSHARK_APPEARANCE" ]; then
    case $TCPSHARK_APPEARANCE in
        mono|Mono|MONO)
            APPEARANCE=0
            ;;
        dark|Dark|DARK)
            APPEARANCE=1
            ACES_BOLD="\033[1;97m"
            ACES_RED="\033[1;91m"
            ACES_GREEN="\033[1;92m"
            ACES_YELLOW="\033[1;93m"
            ACES_BLUE="\033[1;94m"
            ACES_MAGENTA="\033[1;95m"
            ACES_CYAN="\033[1;96m"
            ACES_GRAY="\033[37m"
            ACES_END="\033[0m"
            ;;
        light|Light|LIGHT)
            APPEARANCE=2
            ACES_BOLD="\033[1;30m"
            ACES_RED="\033[1;31m"
            ACES_GREEN="\033[1;32m"
            ACES_YELLOW="\033[1;33m"
            ACES_BLUE="\033[1;34m"
            ACES_MAGENTA="\033[1;35m"
            ACES_CYAN="\033[1;36m"
            ACES_GRAY="\033[90m"
            ACES_END="\033[0m"
            ;;
        *)
            # Not exit.
            printf "${ACES_YELLOW}WARNING${ACES_END}: Invalid enviroment variable (TCPSHARK_APPEARANCE).\n" 1>&2
            ;;
    esac
fi

#==============================================================================#
# Gets options                                                                 #
#==============================================================================#
while getopts "H46dvwqzoeXhVr:i:s:n:t:p:a:x:f:" flag; do
    case $flag in
        \?) usage;;
        H) FLAG_H=1;;
        4) FLAG_4=1;;
        6) FLAG_6=1;;
        d) FLAG_D=1
            if [ $OS_TYPE -ne 0 ]; then
                usage
            fi
            ;;
        v) FLAG_V=1;;
        w) FLAG_W=1;;
        q) FLAG_Q=1;;
        z) FLAG_Z=1;;
        o) FLAG_O=1;;
        e) FLAG_E=1;;
        X) FLAG_XX=1;;
        h) print_help | less -R -P " Manual page line %l (press 'h' for help or 'q' to quit)"
           exit 0;;
        V) print_version;;
        r) FLAG_R=1; TSHARK_INFILE="$OPTARG";;
        i) FLAG_I=1; TSHARK_INTERFACE="$OPTARG";;
        s) FLAG_S=1; STREAM_INDEX=$OPTARG;;
        n) FLAG_N=1; FRAME_NUMBER=$OPTARG;;
        t) FLAG_T=1
            case $OPTARG in
                "a")  TIME_TYPE=0;;
                "ad") TIME_TYPE=1;;
                "dd") TIME_TYPE=2;;
                "e")  TIME_TYPE=3;;
                "r")  TIME_TYPE=4;;
                "rs") TIME_TYPE=5;;
                *)    usage;;
            esac
            ;;
        p) FLAG_P=1; FILTER_PORT=$OPTARG;;
        a) FLAG_A=1; FILTER_ADDR=$OPTARG;;
        x) FLAG_X=1; HEXDUMP_LENGTH=$OPTARG;;
        f) FLAG_F=1
            if [ -z "$CUSTOM_FIELD" ]; then
                CUSTOM_FIELD=$OPTARG
            elif [ -z "$CUSTOM_FIELD2" -a $CUSTOM_FIELD != $OPTARG ]; then
                FLAG_F2=1
                CUSTOM_FIELD2=$OPTARG
            fi
            ;;
    esac
done

shift `expr $OPTIND - 1`
if [ -n "$1" ]; then
    printf "${ACES_RED}ERROR${ACES_END}: Invalid argument ($1).\n" 1>&2
    usage
fi

#==============================================================================#
# Checks Mode                                                                  #
#==============================================================================#
if [ $FLAG_R -eq 1 ]; then
    if [ $FLAG_N -eq 1 ]; then
        #### one mode ####
        RUN_MODE=3
    elif [ $FLAG_S -eq 1 ]; then
        #### flow mode ####
        RUN_MODE=1
    else
        #### list mode ####
        RUN_MODE=0
    fi
else
    RUN_MODE=2
    if [ $FLAG_S -eq 1 -o $FLAG_N -eq 1 ]; then
        usage
    fi
fi

#==============================================================================#
# Checks parameter                                                             #
#==============================================================================#
if [ $RUN_MODE -eq 0 ]; then
    #### list mode ####
    if [ $FLAG_I -eq 1 -o $FLAG_V -eq 1 -o $FLAG_W -eq 1 -o $FLAG_Q -eq 1 -o $FLAG_O -eq 1 -o $FLAG_X -eq 1 -o $FLAG_E -eq 1 -o $FLAG_XX -eq 1 ]; then
        usage
    fi
    if [ $TIME_TYPE -eq 2 -o $TIME_TYPE -eq 3 -o $TIME_TYPE -eq 5 ]; then
        usage
    fi
    if [ $FLAG_4 -eq 1 -a $FLAG_6 -eq 1 ]; then
        usage
    fi
    if [ $FLAG_4 -eq 1 -a $FLAG_A -eq 1 ]; then
        usage
    fi
    if [ $FLAG_6 -eq 1 -a $FLAG_A -eq 1 ]; then
        usage
    fi
    if [ $FLAG_Z -eq 1 -a $FLAG_F -eq 1 ]; then
        usage
    fi
elif [ $RUN_MODE -eq 1 ]; then
    #### flow mode ####
    if [ $FLAG_I -eq 1 -o $FLAG_4 -eq 1 -o $FLAG_6 -eq 1 -o $FLAG_D -eq 1 -o $FLAG_P -eq 1 -o $FLAG_A -eq 1 -o $FLAG_E -eq 1 -o $FLAG_XX -eq 1 ]; then
        usage
    fi
    if [ $FLAG_O -eq 1 -a $FLAG_X -eq 1 ]; then
        usage
    fi
    if [ $FLAG_O -eq 1 -a $FLAG_F -eq 1 ]; then
        usage
    fi
    if [ $FLAG_X -eq 1 -a $FLAG_F -eq 1 ]; then
        usage
    fi
elif [ $RUN_MODE -eq 2 ]; then
    #### flow mode (live capture) ####
    if [ $FLAG_4 -eq 1 -o $FLAG_6 -eq 1 -o $FLAG_V -eq 1 -o $FLAG_D -eq 1 -o $FLAG_X -eq 1 -o $FLAG_E -eq 1 -o $FLAG_XX -eq 1 ]; then
        usage
    fi
    if [ $FLAG_O -eq 1 -a $FLAG_F -eq 1 ]; then
        usage
    fi
else
    #### one mode ####
    if [ $FLAG_I -eq 1 -o $FLAG_4 -eq 1 -o $FLAG_6 -eq 1 -o $FLAG_D -eq 1 -o $FLAG_P -eq 1 -o $FLAG_A -eq 1 ]; then
        usage
    fi
    if [ $FLAG_V -eq 1 -o $FLAG_W -eq 1 -o $FLAG_Q -eq 1 -o $FLAG_O -eq 1 -o $FLAG_X -eq 1 ]; then
        usage
    fi
    if [ $FLAG_H -eq 1 -o $FLAG_T -eq 1 -o $FLAG_Z -eq 1 -o $FLAG_F -eq 1 ]; then
        usage
    fi
fi

#==============================================================================#
# Checks package installation & enviroment variables                           #
#==============================================================================#
if [ -n "$TCPSHARK_TSHARK_COMMAND" ]; then
    if [ ! -x "$TCPSHARK_TSHARK_COMMAND" ]; then
        printf "${ACES_RED}ERROR${ACES_END}: Invalid enviroment variable (TCPSHARK_TSHARK_COMMAND).\n" 1>&2
        exit 1
    fi
    TSHARK_COMMAND="$TCPSHARK_TSHARK_COMMAND"
else
    which "$TSHARK_COMMAND" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: ${TSHARK_COMMAND} not found.\n" 1>&2
        exit 1
    fi
fi

if [ $OS_TYPE -eq 0 -o $OS_TYPE -eq 1 ]; then
    if [ -n "$TCPSHARK_EXECUTION_USER" ]; then
        if [ `whoami` = 'root' ]; then
            PRE_COMMAND="sudo -u $TCPSHARK_EXECUTION_USER"
            $PRE_COMMAND "$TSHARK_COMMAND" -v > /dev/null
            if [ $? -ne 0 ]; then
                exit 1
            fi
        fi
    fi
fi

if [ -n "$TCPSHARK_MAX_STREAMS" ]; then
    check_streams $TCPSHARK_MAX_STREAMS
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: Invalid enviroment variable (TCPSHARK_MAX_STREAMS).\n" 1>&2
        exit 1
    fi
    MAX_STREAMS=$TCPSHARK_MAX_STREAMS
fi

if [ -n "$TCPSHARK_MAX_INFORMATION_LENGTH" ]; then
    check_length $TCPSHARK_MAX_INFORMATION_LENGTH
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: Invalid enviroment variable (TCPSHARK_MAX_INFORMATION_LENGTH).\n" 1>&2
        exit 1
    fi
    MAX_INFOLEN=$TCPSHARK_MAX_INFORMATION_LENGTH
fi

#==============================================================================#
# Checks wireshark version                                                     #
#   1.0.0  - 1.7.*  : TcpShark not supported                                   #
#   1.8.0  - 1.11.* : ANALYSIS_LEVEL => 0                                      #
#   1.12.0 - 1.*.*  : ANALYSIS_LEVEL => 1                                      #
#   2.0.0  - 3.3.*  : ANALYSIS_LEVEL => 2                                      #
#   3.4.0  - 3.*.*  : ANALYSIS_LEVEL => 3                                      #
#   4.0.0  - *.*.*  : ANALYSIS_LEVEL => 4                                      #
#==============================================================================#
version=`get_version`
case "$version" in
    1.[8-9].*)      ANALYSIS_LEVEL=0;;
    1.1[0-1].*)     ANALYSIS_LEVEL=0;;
    1.1[2-9].*)     ANALYSIS_LEVEL=1;;
    1.[2-9][0-9].*) ANALYSIS_LEVEL=1;;
    2.*)            ANALYSIS_LEVEL=2;;
    3.[0-3].*)      ANALYSIS_LEVEL=2;;
    3.*)            ANALYSIS_LEVEL=3;;
    [4-9].*)        ANALYSIS_LEVEL=4;;
    *)              printf "${ACES_RED}ERROR${ACES_END}: Wireshark version too old (${version}).\n" 1>&2; exit 1;;
esac

if [ $RUN_MODE -eq 1 -a $FLAG_R -eq 1 -a $FLAG_H -eq 0 ]; then
    check_field eth.dst.oui_resolved
    if [ $? -eq 0 ]; then
        DISPLAY_VENDOR=1
    fi
fi
if [ $FLAG_X -eq 1 ]; then
    check_field tcp.payload
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: -x option not supported because wireshark version is old (${version}).\n" 1>&2
        exit 1
    fi
fi

#==============================================================================#
# Checks option value                                                          #
#==============================================================================#
if [ $RUN_MODE -eq 3 ]; then
    check_number $FRAME_NUMBER
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: Invalid frame number (${FRAME_NUMBER}).\n" 1>&2
        exit 1
    fi
fi
if [ $FLAG_X -eq 1 ]; then
    check_length $HEXDUMP_LENGTH
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: Invalid data length (${HEXDUMP_LENGTH}).\n" 1>&2
        exit 1
    fi
fi
if [ $FLAG_F -eq 1 ]; then
    check_field $CUSTOM_FIELD
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: Field not supported ($CUSTOM_FIELD).\n" 1>&2
        exit 1
    fi
    if [ $RUN_MODE -eq 0 ]; then
        CUSTOM_FTYPE=`get_ftype $CUSTOM_FIELD`
    fi
fi
if [ $FLAG_F2 -eq 1 ]; then
    check_field $CUSTOM_FIELD2
    if [ $? -ne 0 ]; then
        printf "${ACES_RED}ERROR${ACES_END}: Field not supported ($CUSTOM_FIELD2).\n" 1>&2
        exit 1
    fi
fi

#==============================================================================#
# Builds tshark fields list                                                    #
#==============================================================================#
if [ $RUN_MODE -ne 3 ]; then
    if [ $RUN_MODE -eq 0 ]; then
        #### list mode ####
        TSHARK_FIELDS="-e tcp.stream"
        TSHARK_FIELDS="$TSHARK_FIELDS -e frame.time"
        TSHARK_FIELDS="$TSHARK_FIELDS -e frame.time_relative"
    else
        #### flow mode ####
        TSHARK_FIELDS="-e frame.number"
        if [ $TIME_TYPE -eq 0 -o $TIME_TYPE -eq 1 ]; then
            TSHARK_FIELDS="$TSHARK_FIELDS -e frame.time"
        elif [ $TIME_TYPE -eq 2 ]; then
            TSHARK_FIELDS="$TSHARK_FIELDS -e frame.time_delta_displayed"
        elif [ $TIME_TYPE -eq 3 ]; then
            TSHARK_FIELDS="$TSHARK_FIELDS -e frame.time_epoch"
        else
            TSHARK_FIELDS="$TSHARK_FIELDS -e frame.time_relative"
        fi
    fi
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.srcport"
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.dstport"
    TSHARK_FIELDS="$TSHARK_FIELDS -e icmp.type"
    TSHARK_FIELDS="$TSHARK_FIELDS -e icmpv6.type"
    TSHARK_FIELDS="$TSHARK_FIELDS -e ip.src"
    TSHARK_FIELDS="$TSHARK_FIELDS -e ip.dst"
    TSHARK_FIELDS="$TSHARK_FIELDS -e ipv6.src"
    TSHARK_FIELDS="$TSHARK_FIELDS -e ipv6.dst"
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.fin"
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.syn"
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.reset"
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.push"
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.ack"
    TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.urg"
    if [ $ANALYSIS_LEVEL -ge 4 ]; then
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.ece"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.cwr"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.ae"
    else
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.ecn"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.cwr"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.flags.ns"
    fi
    if [ $RUN_MODE -eq 0 ]; then
        #### list mode ####
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.len"
    else
        #### flow mode ####
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.seq"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.ack"
        if [ $FLAG_W -eq 1 ]; then
            TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.window_size"
        else
            TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.window_size_value"
        fi
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.len"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.option_kind"
    fi
    if [ $FLAG_Z -eq 1 ]; then
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.retransmission"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.fast_retransmission"
        if [ $ANALYSIS_LEVEL -ge 1 ]; then
            TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.spurious_retransmission"
        fi
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.duplicate_ack"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.out_of_order"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.lost_segment"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.ack_lost_segment"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.window_full"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.window_update"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.zero_window"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.zero_window_probe"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.zero_window_probe_ack"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.keep_alive"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.keep_alive_ack"
        if [ $ANALYSIS_LEVEL -ge 2 ]; then
            TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.tfo_syn"
        fi
        if [ $ANALYSIS_LEVEL -ge 3 ]; then
            TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.tfo_ack"
            TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.tfo_ignored"
        fi
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.analysis.reused_ports"
    fi
    if [ $FLAG_O -eq 1 ]; then
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.mss_val"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.wscale.shift"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.wscale.multiplier"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.sack.count"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.sack_le"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.sack_re"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.timestamp.tsval"
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.options.timestamp.tsecr"
    elif [ $FLAG_X -eq 1 ]; then
        TSHARK_FIELDS="$TSHARK_FIELDS -e tcp.payload"
    elif [ $FLAG_F -eq 1 ]; then
        duplicated=0
        for field in $TSHARK_FIELDS ; do
            if [ $field = "-e" ]; then
                continue
            fi
            CUSTOM_COLUMN=`expr $CUSTOM_COLUMN + 1`
            if [ $field = "$CUSTOM_FIELD" ]; then
                duplicated=1
                break
            fi
        done
        if [ $duplicated -eq 0 ]; then
            CUSTOM_COLUMN=0
            TSHARK_FIELDS="$TSHARK_FIELDS -e $CUSTOM_FIELD"
        fi
        
        if [ $FLAG_F2 -eq 1 ]; then
            duplicated=0
            for field in $TSHARK_FIELDS ; do
                if [ $field = "-e" ]; then
                    continue
                fi
                CUSTOM_COLUMN2=`expr $CUSTOM_COLUMN2 + 1`
                if [ $field = "$CUSTOM_FIELD2" ]; then
                    duplicated=1
                    break
                fi
            done
            if [ $duplicated -eq 0 ]; then
                CUSTOM_COLUMN2=0
                TSHARK_FIELDS="$TSHARK_FIELDS -e $CUSTOM_FIELD2"
            fi
        fi
    elif [ $RUN_MODE -le 2 ]; then
        if [ $RUN_MODE -ge 1 -o $FLAG_Z -eq 0 ]; then
            if [ $ANALYSIS_LEVEL -le 1 ]; then
                TSHARK_FIELDS="$TSHARK_FIELDS -e col.Protocol"
                TSHARK_FIELDS="$TSHARK_FIELDS -e col.Info"
            else
                TSHARK_FIELDS="$TSHARK_FIELDS -e _ws.col.Protocol"
                TSHARK_FIELDS="$TSHARK_FIELDS -e _ws.col.Info"
            fi
        fi
    fi
fi

#==============================================================================#
# Builds tshark option parameter                                               #
#==============================================================================#
TSHARK_FIND_OPTIONS="-o nameres.mac_name:FALSE              \
                     -o nameres.transport_name:FALSE        \
                     -o nameres.network_name:FALSE          \
                     -o frame.generate_epoch_time:FALSE     \
                     -o tcp.check_checksum:FALSE            \
                     -o tcp.desegment_tcp_streams:TRUE      \
                     -o tcp.analyze_sequence_numbers:FALSE  \
                     -o tcp.relative_sequence_numbers:FALSE \
                     -o tcp.track_bytes_in_flight:FALSE     \
                     -o tcp.calculate_timestamps:FALSE"
TSHARK_MAIN_OPTIONS="-o nameres.network_name:FALSE          \
                     -o tcp.desegment_tcp_streams:TRUE"

if [ $ANALYSIS_LEVEL -ge 2 ]; then
    TSHARK_FIND_OPTIONS="$TSHARK_FIND_OPTIONS -o ip.use_geoip:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o ip.use_geoip:FALSE"
fi
if [ $TIME_TYPE -eq 3 -o $RUN_MODE -eq 3 ]; then
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o frame.generate_epoch_time:TRUE"
else
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o frame.generate_epoch_time:FALSE"
fi
has_tcp_analysis_field=0
if [ $FLAG_F -eq 1 ]; then
    case $CUSTOM_FIELD in
        tcp.analysis.*) has_tcp_analysis_field=1;;
    esac
fi
if [ $has_tcp_analysis_field -ne 1 -a $FLAG_F2 -eq 1 ]; then
    case $CUSTOM_FIELD2 in
        tcp.analysis.*) has_tcp_analysis_field=1;;
    esac
fi
if [ $has_tcp_analysis_field -eq 1 -o $FLAG_Q -eq 1 -o $FLAG_Z -eq 1 -o $RUN_MODE -eq 3 ]; then
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.analyze_sequence_numbers:TRUE"
else
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.analyze_sequence_numbers:FALSE"
fi
if [ $FLAG_Q -eq 1 -o $RUN_MODE -eq 3 ]; then
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.relative_sequence_numbers:TRUE"
else
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.relative_sequence_numbers:FALSE"
fi
if [ "$CUSTOM_FIELD" = "tcp.analysis.bytes_in_flight" -o "$CUSTOM_FIELD2" = "tcp.analysis.bytes_in_flight" -o $RUN_MODE -eq 3 ]; then
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.track_bytes_in_flight:TRUE"
else
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.track_bytes_in_flight:FALSE"
fi
if [ $RUN_MODE -eq 3 ]; then
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o nameres.mac_name:TRUE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o nameres.transport_name:TRUE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.check_checksum:TRUE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.calculate_timestamps:TRUE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o vlan.summary_in_tree:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o ip.summary_in_tree:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o ipv6.summary_in_tree:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.summary_in_tree:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o udp.summary_in_tree:FALSE"
else
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o nameres.mac_name:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o nameres.transport_name:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.check_checksum:FALSE"
    TSHARK_MAIN_OPTIONS="$TSHARK_MAIN_OPTIONS -o tcp.calculate_timestamps:FALSE"
fi

#==============================================================================#
# Analyzes packet capture                                                      #
#==============================================================================#
if [ $RUN_MODE -eq 0 ]; then
    #### list mode ####
    TSHARK_FILTER="tcp"
    printf "Searching file...\r" 1>&2
    line=`$PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -R "$TSHARK_FILTER" -2 -c 1 $TSHARK_FIND_OPTIONS`
    if [ $? -ne 0 ]; then
        exit 1
    fi
    if [ -z "$line" ]; then
        printf "${ACES_YELLOW}WARNING${ACES_END}: No TCP packets.\n" 1>&2
        exit 1
    fi
    if [ $FLAG_P -eq 1 ]; then
        TSHARK_FILTER="tcp.port == $FILTER_PORT"
    fi
    if [ $FLAG_A -eq 1 ]; then
        echo "$FILTER_ADDR" | "$GREP_COMMAND" : > /dev/null
        if [ $? -eq 0 ]; then
            TSHARK_FILTER="$TSHARK_FILTER and ipv6.addr == $FILTER_ADDR"
        else
            TSHARK_FILTER="$TSHARK_FILTER and ip.addr == $FILTER_ADDR"
        fi
    fi
    if [ $FLAG_4 -eq 1 ]; then
        TSHARK_FILTER="$TSHARK_FILTER and ip"
    fi
    if [ $FLAG_6 -eq 1 ]; then
        TSHARK_FILTER="$TSHARK_FILTER and ipv6"
    fi
    if [ $FLAG_P -eq 1 -o $FLAG_A -eq 1 -o $FLAG_4 -eq 1 -o $FLAG_6 -eq 1 ]; then
        line=`$PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -R "$TSHARK_FILTER" -2 -c 1 $TSHARK_FIND_OPTIONS`
        if [ $? -ne 0 ]; then
            exit 1
        fi
        if [ -z "$line" ]; then
            printf "${ACES_YELLOW}WARNING${ACES_END}: No such TCP stream.\n" 1>&2
            exit 1
        fi
    fi
    if [ $FLAG_H -ne 1 ]; then
        print_header_list
    fi
    printf "Now analyzing... \r" 1>&2
    $PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -l -Y "$TSHARK_FILTER" -T fields $TSHARK_FIELDS $TSHARK_MAIN_OPTIONS | tcp_stream_list

elif [ $RUN_MODE -eq 1 ]; then
    #### flow mode ####
    TSHARK_FILTER="tcp.stream == $STREAM_INDEX"
    printf "Searching file...\r" 1>&2
    line=`$PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -R "$TSHARK_FILTER" -2 -c 1 $TSHARK_FIND_OPTIONS`
    if [ $? -ne 0 ]; then
        exit 1
    fi
    if [ -z "$line" ]; then
        printf "${ACES_YELLOW}WARNING${ACES_END}: No such TCP stream.\n" 1>&2
        exit 1
    fi
    if [ $FLAG_H -ne 1 ]; then
        print_header_flow
    fi
    TSHARK_FILTER="$TSHARK_FILTER or icmp or icmpv6"
    printf "Now analyzing... \r" 1>&2
    $PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -l -Y "$TSHARK_FILTER" -T fields $TSHARK_FIELDS $TSHARK_MAIN_OPTIONS | tcp_stream_flow

elif [ $RUN_MODE -eq 2 ]; then
    #### flow mode (live capture) ####
    TSHARK_FILTER="tcp.stream == $STREAM_INDEX"
    TSHARK_CAPTURE_FILTER="tcp"
    if [ $FLAG_P -eq 1 ]; then
        TSHARK_CAPTURE_FILTER="$TSHARK_CAPTURE_FILTER and port $FILTER_PORT"
    fi
    if [ $FLAG_A -eq 1 ]; then
        TSHARK_CAPTURE_FILTER="$TSHARK_CAPTURE_FILTER and host $FILTER_ADDR"
    fi
    if [ `whoami` != 'root' ]; then
        printf "${ACES_RED}ERROR${ACES_END}: run as root user for live captrue.\n" 1>&2
        exit 1
    fi
    if [ $FLAG_H -ne 1 ]; then
        print_header_flow
    fi
    TSHARK_FILTER="$TSHARK_FILTER or icmp or icmpv6"
    TSHARK_CAPTURE_FILTER="$TSHARK_CAPTURE_FILTER or icmp or icmp6"
    if [ $FLAG_I -eq 1 ]; then
        $PRE_COMMAND "$TSHARK_COMMAND" -i $TSHARK_INTERFACE -f "$TSHARK_CAPTURE_FILTER" -q -l -Y "$TSHARK_FILTER" -T fields $TSHARK_FIELDS $TSHARK_MAIN_OPTIONS | tcp_stream_flow
    else
        $PRE_COMMAND "$TSHARK_COMMAND" -f "$TSHARK_CAPTURE_FILTER" -q -l -Y "$TSHARK_FILTER" -T fields $TSHARK_FIELDS $TSHARK_MAIN_OPTIONS | tcp_stream_flow
    fi

else
    #### one mode ####
    if [ $FLAG_S -eq 1 ]; then
        TSHARK_FILTER="tcp.stream == $STREAM_INDEX and frame.number == $FRAME_NUMBER"
    else
        TSHARK_FILTER="frame.number == $FRAME_NUMBER"
    fi
    printf "Finding packet...\r" 1>&2
    if [ $FLAG_XX -eq 1 ]; then
        $PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -l -Y "$TSHARK_FILTER" -c $FRAME_NUMBER -x $TSHARK_FIND_OPTIONS | tcp_stream_one_hex
    else
        $PRE_COMMAND "$TSHARK_COMMAND" -r "$TSHARK_INFILE" -l -Y "$TSHARK_FILTER" -c $FRAME_NUMBER -V $TSHARK_MAIN_OPTIONS | tcp_stream_one
    fi
fi

exit $?

