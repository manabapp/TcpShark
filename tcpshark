#!/bin/sh
############################# DONT EDIT THIS FILE ##############################
#                                                                              #
NAME="tcpshark - Packet analyzer for TCP troubleshooting"                      #
VERSION="0.9j"                                                                 #
#                                                                              #
#          Copyright (C) 2021 manabapp. <https://manabapp.github.io/TcpShark/> #
################################################################################

WIRESHARK_OUIFILE_LINUX="/usr/share/wireshark/manuf"
WIRESHARK_OUIFILE_SUNOS="/usr/share/wireshark/manuf"
WIRESHARK_OUIFILE_DARWIN="/Applications/Wireshark.app/Contents/Resources/share/wireshark/manuf"

usage()
{
if [ $OS_TYPE -eq 0 ]; then
    echo "usage: tcpshark -r <infile> [-H] [-C] [-t a|ad|r] [-p <port>] [-4 | -6 | -a <addr>] [-d] [-x | -f <field>]" 1>&2
else
    echo "usage: tcpshark -r <infile> [-H] [-C] [-t a|ad|r] [-p <port>] [-4 | -6 | -a <addr>] [-x | -f <field>]" 1>&2
fi
    echo "       tcpshark -r <infile> -s <index> [-H] [-C] [-t a|ad|dd|e|r|rs] [-v] [-w] [-q] [-x] [-f <field>]" 1>&2
    echo "       tcpshark -h  (TcpShark's Manual)" 1>&2
    exit 1
}

print_version()
{
    cmd=$0
    if [ ! -f $cmd ]; then
        cmd=`which tcpshark`
        if [ $? -ne 0 ]; then
            echo "TcpShark version: ${VERSION}  (md5:Unknown)"
            exit 0
        fi
    fi
    if [ $OS_TYPE -eq 2 ]; then
        sum=`md5 $cmd | cut -d' ' -f 4`
    else
        sum=`md5sum $cmd | cut -d' ' -f 1`
    fi
    echo "TcpShark version: ${VERSION}  (md5:${sum})"
    exit 0
}

print_help()
{
    echo "NAME"
    echo "    ${NAME}"
    echo ""
    echo "SYNOPSIS"
    echo "    <list mode>"
if [ $OS_TYPE -eq 0 ]; then
    echo "    tcpshark -r <infile> [-H] [-C] [-t a|ad|r] [-p <port>] [-4 | -6 | -a <addr>] [-d] [-x | -f <field>]" 
else
    echo "    tcpshark -r <infile> [-H] [-C] [-t a|ad|r] [-p <port>] [-4 | -6 | -a <addr>] [-x | -f <field>]" 
fi
    echo ""
    echo "    <flow mode>"
    echo "    tcpshark -r <infile> -s <index> [-H] [-C] [-t a|ad|dd|e|r|rs] [-v] [-w] [-q] [-x] [-f <field>]"
    echo ""
    echo "DESCRIPTION"
    echo "    TcpShark is network analyzing script, powered by Wireshark."
    echo "    This utility displays visually the TCP stream for ease of analysis."
    echo ""
    echo "    How to use:"
    echo "      First, please check TCP streams captured in file with \"list mode\"."
    echo "      You can analyze the stream with \"flow mode\" by specifying index on list."
    echo ""
if [ $OS_TYPE -ne 2 ]; then
    echo "    If runs as root, creates 'tcpshark' user and executes as a that user."
    echo ""
fi
    echo "OPTIONS"
    echo "    -r <infile>"
    echo "          Reads packet data from infile."
    echo "          This utility can analyze the file captured by Wireshark, tcpdump, snoop, etc."
    echo ""
    echo "    -s <index>"
    echo "          Displays the specific stream with flow mode."
    echo "          If no this option, runs with list mode."
    echo ""
    echo "    -H"
    echo "          Omits the header information."
    echo ""
    echo "    -C"
    echo "          Displays a result in colorless."
    echo "          In default, displays colorfully with ANSI color escape sequences."
    echo "          If piping the result to \"less\" command, please specify with -R option."
    echo ""
    echo "            $ tcpshark -r tcpdump.pcap -s 0 | less -R"
    echo ""
    echo "    -t a|ad|dd|e|r|rs"
    echo "          Selects the format of the packet timestamp."
    echo ""
    echo "          The format can be one of:"
    echo ""
    echo "            a    absolute time with no date [default]"
    echo "            ad   absolute date and time"
    echo "            dd   delta time since the previous displayed packet"
    echo "            e    epoch time in seconds since Jan 1, 1970 00:00:00"
    echo "            r    relative time since the first packet in the capture file"
    echo "            rs   relative time since the first packet in the stream"
    echo ""
    echo "    -p <port>"
    echo "          Only streams with specified port are displayed."
    echo ""
    echo "    -4"
    echo "          Only IPv4 streams are displayed."
    echo ""
    echo "    -6 "
    echo "          Only IPv6 streams are displayed."
    echo ""
    echo "    -a <addr>"
    echo "          Only streams with specified IPv4/v6 address are displayed."
    echo ""
if [ $OS_TYPE -eq 0 ]; then
    echo "    -d"
    echo "          Streams list is sorted in descending order according to the total number of packets."
    echo ""
fi
    echo "    -v"
    echo "          Reverses the source and destination."
    echo ""
    echo "    -w"
    echo "          Calculated window size is displayed, if scaling."
    echo ""
    echo "    -q"
    echo "          Relative sequence numbers and acknowledgement numbers are displayed."
    echo "          In default, absolute numbers."
    echo ""
    echo "    -x"
    echo "          TCP analysis information is displayed."
    echo "          In detail, see \"OUTPUT FORMAT\"."
    echo ""
    echo "    -f <field>"
    echo "          Specified field is displayed."
    echo "          In list mode, statistics information is displayed in each direction."
    echo "          About available field, see Wireshark web site."
    echo ""
    echo "            https://www.wireshark.org/docs/dfref/"
    echo ""
    echo "    -h"
    echo "          Prints this help page."
    echo ""
    echo "    -V"
    echo "          Prints the version and exits."
    echo ""
    echo ""
    echo "OUTPUT FORMAT"
    echo ""
    echo "  <list mode>"
    echo ""
    echo "    Index              Stream index."
    echo ""
    echo "    TIME               Timestamp in first packet."
    echo ""
    echo "    Src/Dst ADDRESS    Source/Destination IP address and port."
    echo ""
    echo "    Duration           Period between first/last packets."
    echo ""
    echo "    FLAGS              TCP flag's bitwize OR on all packets."
    echo ""
    echo "                         F : Fin"
    echo "                         S : Syn"
    echo "                         R : Reset"
    echo "                         P : Push"
    echo "                         A : Acknowledgment"
    echo "                         U : Urgent"
    echo "                         E : ECN-Echo"
    echo "                         C : Congestion Window Reduced (CWR)"
    echo "                         N : Nonce"
    echo ""
    echo "    Packets Bytes      Number of packets count and total of TCP data length in each direction."
    echo "                       Note that data length is not a frame size."
    echo ""
    echo "    Custom STATISTICS  Number of packets which includes the specified field."
    echo "                       Calculates sum-total, minimum, maximum and average value, if field type is"
    echo "                       numerical (INT, UINT, BOOLEAN, DOUBLE, FLOAT, or RELATIVE_TIME)."
    echo ""
    echo "    Analysis           TCP analysis statistics in each direction."
    echo ""
    echo "                         ret : Retransmission"
    echo "                         fst : Fast Retransmission"
    echo "                         spu : Spurious Retransmission  (Wireshark 1.12.0 or newer)"
    echo "                         dup : Duplicate ACK"
    echo "                         out : Out Of Order"
    echo "                         los : Previous Segment Unseen"
    echo "                         alo : ACKed Unseen Packet"
    echo "                         wup : Window update"
    echo "                         ful : Window full"
    echo "                         zro : Zero Window"
    echo "                         zrp : Zero Window Probe"
    echo "                         zpa : Zero Window Probe Ack"
    echo "                         kep : Keep Alive"
    echo "                         kpa : Keep Alive ACK"
    echo "                         tfo : SYN with TFO cookie      (Wireshark 2.0.0 or newer)"
    echo "                         afo : Accepting TFO data       (Wireshark 3.4.0 or newer)"
    echo "                         ifo : Ignoring TFO data        (Wireshark 3.4.0 or newer)"
    echo "                         prt : TCP Port numbers reused"
    echo ""
    echo "  <flow mode>"
    echo ""
    echo "    No.                Packet number in capture file."
    echo ""
    echo "    TIME               Timestamp in each packet."
    echo ""
    echo "    WINDOW Size        TCP windows size."
    echo ""
    echo "    Src/Dst PORT       Source or Destination port."
    echo ""
    echo "    LENGTH             TCP segment length."
    echo ""
    echo "    FLAGS              TCP flags."
    echo "                       Please refer to the description in <list mode>."
    echo ""
    echo "    SEQ/ACK Number     Sequence or Acknowledgment number."
    echo ""
    echo "    OPTION             TCP options."
    echo ""
    echo "                         mwSstO"
    echo "                         ------"
    echo "                         |||||+ Other option (except EOL, NOP)"
    echo "                         ||||+- TCP Time Stamp Option"
    echo "                         |||+-- TCP SACK Option"
    echo "                         ||+--- TCP SACK Permitted Option"
    echo "                         |+---- TCP Window Scale Option"
    echo "                         +----- TCP MSS Option"
    echo ""
    echo "    Analysis           TCP analysis information for TCP troubleshooting."
    echo "                       Please refer to the description in <list mode>."
    echo ""
    echo "    Option VALUES      TCP Option's values (if some bits in OPTION area are set)."
    echo ""
    echo "                         [m] MSS=XXX             : MSS value"
    echo "                         [w] WS=XXX(YYY)         : Shift count, multiplier"
    echo "                         [S] SACK_PERM=1         : ---"
    echo "                         [s] SLE=XXX SRE=YYY     : TCP ACK left edge, right edge"
    echo "                         [t] TSval=XXX TSecr=YYY : Timestamp value, echo reply"
    echo "                         [O] OTHER(kind:XXX)     : TCP option's kind"
    echo ""
    echo "    Custom FIELD       Value of specified custom field."
    echo "                       Only displays if each packet includes the field."
    echo ""
    echo ""
    echo "ENVIRONMENT VARIABLES"
    echo "    TCPSHARK_TSHARK_COMMAND"
    echo "          File path of executable command 'tshark'."
    echo "          If the command is not found on your lab, set the full path of tshark."
    echo ""
    echo "    TCPSHARK_AWK_COMMAND"
    echo "          File path of executable command 'gawk', 'nawk', or 'awk'."
    echo "          If such awk is not found on your lab, set the full path of awk."
    echo ""
    echo "    TCPSHARK_WIRESHARK_OUIFILE"
    echo "          File path of OUI (Organizationally Unique Identifier) list included in Wireshark."
    echo "          If this file is not found on your lab, set the full path of the file."
    echo ""
    echo "    TCPSHARK_MAX_STREAMS"
    echo "          Maximum number of streams that can be processed with list mode."
    echo "          Default value is ${MAX_STREAMS}. Upper limit is 1048576."
    echo "          If a huge number of streams in your capture file, set the number of streams or each more."
    echo "          Note that it may require a lot of memory to process huge streams."
    echo ""
    echo "    TCPSHARK_APPEARANCE"
    echo "          TcpShark displays colorfully with ANSI color escape sequences."
    echo "          Selects appearance according to your terminal color (Dark[default] or Light)."
    echo "          If your terminal's background is white color, set 'Light'."
    echo ""
    echo "LICENSE"
    echo "    GPLv3+: GNU GPL version 3 or later <https://www.gnu.org/licenses/gpl.html>"
    echo ""
    echo "                                                                       Copyright (C) 2021 manabapp."
    exit 0
}

check_number()
{
    number=$1
    if [ -z "$number" ]; then
        return 1
    fi
    if [ ${#number} -gt 7 ]; then
        return 1
    fi
    expr "$number" + 1 > /dev/null 2>&1
    if [ $? -lt 2 ] ; then
        if [ $number -ge 0 -a $number -le 1048576 ]; then
            return 0
        fi
    fi
    return 1
}

check_ipv4()
{
    echo "$1" | grep -E '^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])$' > /dev/null
    if [ $? -eq 0 ] ; then
        return 0
    fi
    return 1
}

check_ipv6()
{
    echo "$1" | grep -E '(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))' > /dev/null
    if [ $? -eq 0 ] ; then
        return 0
    fi
    return 1
}

check_ftype()
{
    $TSHARK_COMMAND -G fields | $AWK_COMMAND -F "\t" -v field="$1" '
    BEGIN { ftype = 0 };
    /^F/ {
        if ($3 != field) next
    
        # ftype: 0 - not found
        #        1 - integer
        #        2 - float
        #        3 - other
        ft = $4
        if (ft == "FT_BOOLEAN")            ftype = 1
        else if (ft == "FT_INT8")          ftype = 1
        else if (ft == "FT_INT16")         ftype = 1
        else if (ft == "FT_INT24")         ftype = 1
        else if (ft == "FT_INT32")         ftype = 1
        else if (ft == "FT_INT64")         ftype = 1
        else if (ft == "FT_UINT8")         ftype = 1
        else if (ft == "FT_UINT16")        ftype = 1
        else if (ft == "FT_UINT24")        ftype = 1
        else if (ft == "FT_UINT32")        ftype = 1
        else if (ft == "FT_UINT64")        ftype = 1
        else if (ft == "FT_FLOAT")         ftype = 2
        else if (ft == "FT_DOUBLE")        ftype = 2
        else if (ft == "FT_RELATIVE_TIME") ftype = 2
        else                               ftype = 3
        exit
    };
    END { exit ftype } '
    return $?
}

print_vendor() 
{
    mac=$1
    if [ ! -r "$OUI_FILE" ]; then
        return
    fi
    mac_oui=`echo $mac | cut -c1-8`
    if [ -z "$mac_oui" ]; then
        printf "(Unknown)"
        return
    fi
    vendor_name=`grep -i ^$mac_oui "$OUI_FILE" | head -1 | $AWK_COMMAND '{print$2}'`
    if [ -z "$vendor_name" ]; then
        printf "(Unknown)"
        return
    fi
    printf "(%s)" "$vendor_name"
}

tcp_stream_list()
{
    tshark_filter="tcp"
    custom_column=0
    
    #==============================================#
    # Finds any stream                             #
    #==============================================#
    line=`$TSHARK_COMMAND -r $TSHARK_INFILE -R "$tshark_filter" -2 -c 1`
    if [ $? -ne 0 ]; then
        return 1
    fi
    if [ -z "$line" ]; then
        printf "WARNING: No TCP packets.\n" 1>&2
        return 1
    fi
    
    #==============================================#
    # Builds tshark's filter                       #
    #==============================================#
    if [ $FLAG_P -eq 1 ]; then
        tshark_filter="tcp.port == $FILTER_PORT"
    fi
    if [ $FLAG_A -eq 1 ]; then
        echo "$FILTER_ADDR" | grep : > /dev/null
        if [ $? -eq 0 ]; then
            tshark_filter="$tshark_filter and ipv6.addr == $FILTER_ADDR"
        else
            tshark_filter="$tshark_filter and ip.addr == $FILTER_ADDR"
        fi
    fi
    if [ $FLAG_4 -eq 1 ]; then
        tshark_filter="$tshark_filter and ip"
    fi
    if [ $FLAG_6 -eq 1 ]; then
        tshark_filter="$tshark_filter and ipv6"
    fi
    
    #==============================================#
    # Builds tshark's fields list                  #
    #==============================================#
    tshark_fields="-e tcp.stream \
    -e frame.time \
    -e frame.time_relative \
    -e tcp.srcport \
    -e tcp.dstport \
    -e ip.src \
    -e ip.dst \
    -e ipv6.src \
    -e ipv6.dst \
    -e tcp.flags.fin \
    -e tcp.flags.syn \
    -e tcp.flags.reset \
    -e tcp.flags.push \
    -e tcp.flags.ack \
    -e tcp.flags.urg \
    -e tcp.flags.ecn \
    -e tcp.flags.cwr \
    -e tcp.flags.ns \
    -e tcp.len \
    -e tcp.analysis.retransmission \
    -e tcp.analysis.fast_retransmission \
    -e tcp.analysis.duplicate_ack \
    -e tcp.analysis.out_of_order \
    -e tcp.analysis.lost_segment \
    -e tcp.analysis.ack_lost_segment \
    -e tcp.analysis.window_full \
    -e tcp.analysis.window_update \
    -e tcp.analysis.zero_window \
    -e tcp.analysis.zero_window_probe \
    -e tcp.analysis.zero_window_probe_ack \
    -e tcp.analysis.keep_alive \
    -e tcp.analysis.keep_alive_ack \
    -e tcp.analysis.reused_ports"
    
    if [ $ANALYSIS_LEVEL -ge 1 ]; then
        tshark_fields="$tshark_fields -e tcp.analysis.spurious_retransmission"
    fi
    if [ $ANALYSIS_LEVEL -ge 2 ]; then
        tshark_fields="$tshark_fields -e tcp.analysis.tfo_syn"
    fi
    if [ $ANALYSIS_LEVEL -ge 3 ]; then
        tshark_fields="$tshark_fields -e tcp.analysis.tfo_ack"
        tshark_fields="$tshark_fields -e tcp.analysis.tfo_ignored"
    fi
    
    if [ $FLAG_F -eq 1 ]; then
        duplicated=0
        for field in $tshark_fields ; do
            if [ $field = "-e" ]; then
                continue
            fi
            custom_column=`expr $custom_column + 1`
            if [ $field = "$CUSTOM_FIELD" ]; then
                duplicated=1
                break
            fi
        done
        if [ $duplicated -eq 0 ]; then
            custom_column=0
            tshark_fields="$tshark_fields -e $CUSTOM_FIELD"
        fi
    fi
    
    #==============================================#
    # Displays header information                  #
    #==============================================#
    if [ $FLAG_H -ne 1 ]; then
        printf "====="
        if [ $TIME_TYPE -eq 1 ]; then
            printf "============================"
        elif [ $TIME_TYPE -eq 3 ]; then
            printf "==================="
        else 
            printf "================="
        fi
        printf "================================================================================="
        if [ $FLAG_X -eq 1 ]; then
            if [ $ANALYSIS_LEVEL -eq 1 ]; then
                printf "========================================================================="
            elif [ $ANALYSIS_LEVEL -eq 2 ]; then
                printf "=============================================================================="
            elif [ $ANALYSIS_LEVEL -eq 3 ]; then
                printf "==================================================================================="
            else
                printf "============================================================================================="
            fi
        elif [ $FLAG_F -eq 1 ]; then
            printf "================================================================================================"
        else
            printf "================================================"
        fi
        printf "\n"
        printf "TCP Stream list\n"
        printf "Filter: ${tshark_filter}\n"
        if [ $FLAG_F -eq 1 ]; then
            printf "CField: ${CUSTOM_FIELD}\n"
        fi
        printf "     "
        if [ $TIME_TYPE -eq 1 ]; then
            printf "                            "
        elif [ $TIME_TYPE -eq 3 ]; then
            printf "                   "
        else 
            printf "                 "
        fi
        printf "                                                                                 "
        if [ $FLAG_X -eq 1 ]; then
            if [ $ANALYSIS_LEVEL -eq 1 ]; then
                printf " | Analysis                                                             |"
            elif [ $ANALYSIS_LEVEL -eq 2 ]; then
                printf " | Analysis                                                                  |"
            elif [ $ANALYSIS_LEVEL -eq 3 ]; then
                printf " | Analysis                                                                       |"
            else
                printf " | Analysis                                                                                 |"
            fi
        elif [ $FLAG_F -eq 1 ]; then
            printf " | Custom STATISTICS              ${ACES_BLUE}<----${ACES_END}        | |        ${ACES_BOLD}---->${ACES_END}                                |"
        else
            printf " |        ${ACES_BLUE}<----${ACES_END}        | |        ${ACES_BOLD}---->${ACES_END}        |"
        fi
        printf "\n"
        printf "Index"
        if [ $TIME_TYPE -eq 1 ]; then
            printf "                        TIME"
        elif [ $TIME_TYPE -eq 3 ]; then
            printf "               TIME"
        else 
            printf "             TIME"
        fi
        printf "                    Src/Dst ADDRESS                         Duration  FLAGS      "
        if [ $FLAG_X -eq 1 ]; then
            if [ $ANALYSIS_LEVEL -eq 1 ]; then
                printf " | ret  fst  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  prt |"
            elif [ $ANALYSIS_LEVEL -eq 2 ]; then
                printf " | ret  fst  spu  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  prt |"
            elif [ $ANALYSIS_LEVEL -eq 3 ]; then
                printf " | ret  fst  spu  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  tfo  prt |"
            else
                printf " | ret  fst  spu  dup  out  los  alo  ful  wup  zro  zrp  zpa  kep  kpa  tfo  afo  ifo  prt |"
            fi
        elif [ $FLAG_F -eq 1 ]; then
            printf " |   COUNT        MIN        MAX           AVG | |   COUNT        MIN        MAX           AVG |"
        else
            printf " | Packets       Bytes | | Packets       Bytes |"
        fi
        printf "\n"
        printf "====="
        if [ $TIME_TYPE -eq 1 ]; then
            printf "============================"
        elif [ $TIME_TYPE -eq 3 ]; then
            printf "==================="
        else 
            printf "================="
        fi
        printf "================================================================================="
        if [ $FLAG_X -eq 1 ]; then
            if [ $ANALYSIS_LEVEL -eq 1 ]; then
                printf "========================================================================="
            elif [ $ANALYSIS_LEVEL -eq 2 ]; then
                printf "=============================================================================="
            elif [ $ANALYSIS_LEVEL -eq 3 ]; then
                printf "==================================================================================="
            else
                printf "============================================================================================="
            fi
        elif [ $FLAG_F -eq 1 ]; then
            printf "================================================================================================"
        else
            printf "================================================"
        fi
        printf "\n"
    fi
    
    #==============================================#
    # Executes tshark                              #
    #==============================================#
    printf "Now analyzing...\r" 1>&2
    $TSHARK_COMMAND -r $TSHARK_INFILE -Y "$tshark_filter" -T fields $tshark_fields $TSHARK_OPTIONS | \
      $AWK_COMMAND -v time_type="$TIME_TYPE"           \
                   -v descending="$FLAG_D"             \
                   -v analysis="$FLAG_X"               \
                   -v analysis_level="$ANALYSIS_LEVEL" \
                   -v custom="$FLAG_F"                 \
                   -v custom_column="$custom_column"   \
                   -v custom_ftype="$CUSTOM_FTYPE"     \
                   -v max_streams="$MAX_STREAMS"       \
                   -v appearance="$APPEARANCE" '
    function compare_streams(i1, v1, i2, v2) {
        if (!indexes[i1])
            return 1
        if (!indexes[i2])
            return -1
        
        rtime1 = streams[i1, "rtime"]
        rtime2 = streams[i2, "rtime"]
        packets1 = streams[i1, "l_packets"] + streams[i1, "r_packets"]
        packets2 = streams[i2, "l_packets"] + streams[i2, "r_packets"]
        bytes1 = streams[i1, "l_bytes"] + streams[i1, "r_bytes"]
        bytes2 = streams[i2, "l_bytes"] + streams[i2, "r_bytes"]
        
        if (packets1 > packets2)      return -1
        else if (packets1 < packets2) return 1
        else if (bytes1 > bytes2) return -1
        else if (bytes1 < bytes2) return 1
        else if (rtime1 < rtime2) return -1
        else                      return 1
    }
    function print_analysis(cnt, aces_color) {
        if (cnt > 0) 
            printf(" %s%4d%s", aces_color, cnt, ACES_END);
        else
            printf(" %s%4d%s", ACES_GRAY, cnt, ACES_END);
    }
    function print_statistics(cnt, sum, min, max) {
        if (cnt == 0)
            printf("%s", ACES_GRAY)
        
        printf("  %7d",  cnt)
        
        if (custom_ftype == 3)      printf("          -")
        else if (custom_ftype == 2) printf(" %10.6f", min)
        else                        printf(" %10d",   min)
        
        if (custom_ftype == 3)      printf("          -")
        else if (custom_ftype == 2) printf(" %10.6f", max)
        else                        printf(" %10d",   max)
        
        if (custom_ftype == 3)      printf("             -")
        else if (cnt == 0)          printf("           NaN")
        else if (custom_ftype == 2) printf(" %13.6f", sum / cnt)
        else                        printf(" %13.2f", sum / cnt)
        
        if (cnt == 0)
            printf("%s", ACES_END)
    }
    function print_traffic(packets, bytes) {
        if (packets > 0)
            printf("  %7d", packets);
        else
            printf("  %s%7d%s", ACES_GRAY, packets, ACES_END);
        
        if (bytes > 0)
            printf("  %10u", bytes);
        else
            printf("  %s%10u%s", ACES_GRAY, bytes, ACES_END);
    }
    BEGIN {
        FS = "\t"
        exceeded = 0
        for (i = 0; i <= max_streams; i++)
            indexes[i] = 0
        
        ### ANSI Color Escape Sequences ###
        if (appearance == 0) {
            ACES_BOLD    = ""
            ACES_RED     = ""
            ACES_GREEN   = ""
            ACES_YELLOW  = ""
            ACES_BLUE    = ""
            ACES_MAGENTA = ""
            ACES_CYAN    = ""
            ACES_GRAY    = ""
            ACES_END     = ""
        }
        else if (appearance == 1) {
            ACES_BOLD    = "\033[1;97m"
            ACES_RED     = "\033[1;91m"
            ACES_GREEN   = "\033[1;92m"
            ACES_YELLOW  = "\033[1;93m"
            ACES_BLUE    = "\033[1;94m"
            ACES_MAGENTA = "\033[1;95m"
            ACES_CYAN    = "\033[1;96m"
            ACES_GRAY    = "\033[37m"
            ACES_END     = "\033[0m"
        }
        else {
            ACES_BOLD    = "\033[1;30m"
            ACES_RED     = "\033[1;31m"
            ACES_GREEN   = "\033[1;32m"
            ACES_YELLOW  = "\033[1;33m"
            ACES_BLUE    = "\033[1;34m"
            ACES_MAGENTA = "\033[1;35m"
            ACES_CYAN    = "\033[1;36m"
            ACES_GRAY    = "\033[90m"
            ACES_END     = "\033[0m"
        }
        
        aces_colors["fin"]   = ACES_GREEN
        aces_colors["syn"]   = ACES_CYAN
        aces_colors["reset"] = ACES_RED
        aces_colors["push"]  = ACES_BOLD
        aces_colors["ack"]   = ACES_GRAY
        aces_colors["urg"]   = ACES_MAGENTA
        aces_colors["ecn"]   = ACES_YELLOW
        aces_colors["cwr"]   = ACES_MAGENTA
        aces_colors["ns"]    = ACES_YELLOW
        
        aces_colors["ret"] = ACES_GREEN
        aces_colors["fst"] = ACES_CYAN
        aces_colors["spu"] = ACES_CYAN
        aces_colors["dup"] = ACES_BLUE
        aces_colors["out"] = ACES_BOLD
        aces_colors["los"] = ACES_RED
        aces_colors["alo"] = ACES_RED
        aces_colors["ful"] = ACES_MAGENTA
        aces_colors["wup"] = ACES_YELLOW
        aces_colors["zro"] = ACES_BOLD
        aces_colors["zrp"] = ACES_MAGENTA
        aces_colors["zpa"] = ACES_YELLOW
        aces_colors["kep"] = ACES_MAGENTA
        aces_colors["kpa"] = ACES_YELLOW
        aces_colors["tfo"] = ACES_BOLD
        aces_colors["afo"] = ACES_MAGENTA
        aces_colors["ifo"] = ACES_YELLOW
        aces_colors["prt"] = ACES_BOLD
        
        months["Jan"] = 1
        months["Feb"] = 2
        months["Mar"] = 3
        months["Apr"] = 4
        months["May"] = 5
        months["Jun"] = 6
        months["Jul"] = 7
        months["Aug"] = 8
        months["Sep"] = 9
        months["Oct"] = 10
        months["Nov"] = 11
        months["Dec"] = 12
    };
    {
        e_index           = $1
        if (e_index >= max_streams) {
            exceeded = 1
            next
        }
        e_atime           = $2
        e_rtime           = $3
        e_srcport         = $4
        e_dstport         = $5
        e_srcaddr         = $6
        e_dstaddr         = $7
        ipv6              = 0
        if (e_srcaddr == NULL || e_srcaddr == "") {
            ipv6          = 1
            e_srcaddr     = $8
            e_dstaddr     = $9
        }
        e_flags["fin"]    = $10
        e_flags["syn"]    = $11
        e_flags["reset"]  = $12
        e_flags["push"]   = $13
        e_flags["ack"]    = $14
        e_flags["urg"]    = $15
        e_flags["ecn"]    = $16
        e_flags["cwr"]    = $17
        e_flags["ns"]     = $18
        e_len             = $19
        e_analysis["ret"] = $20
        e_analysis["fst"] = $21
        e_analysis["spu"] = 0
        e_analysis["dup"] = $22
        e_analysis["out"] = $23
        e_analysis["los"] = $24
        e_analysis["alo"] = $25
        e_analysis["ful"] = $26
        e_analysis["wup"] = $27
        e_analysis["zro"] = $28
        e_analysis["zrp"] = $29
        e_analysis["zpa"] = $30
        e_analysis["kep"] = $31
        e_analysis["kpa"] = $32
        e_analysis["prt"] = $33
        e_analysis["tfo"] = 0
        e_analysis["afo"] = 0
        e_analysis["ifo"] = 0
        e_analysis["prt"] = $33
        if (analysis) {
            if (analysis_level >= 1)
                e_analysis["spu"] = $34
            if (analysis_level >= 2)
                e_analysis["tfo"] = $35
            if (analysis_level >= 3) {
                e_analysis["afo"] = $36
                e_analysis["ifo"] = $37
            }
        }
        if (custom) {
            if (custom_column == 0) {
                if (analysis_level == 0)      custom_column = 34
                else if (analysis_level == 1) custom_column = 35
                else if (analysis_level == 2) custom_column = 36
                else                          custom_column = 38
            }
            e_custom_val = $custom_column
        }
        
        if (!indexes[e_index]) {
            indexes[e_index] = 1
            streams[e_index, "atime"]       = e_atime
            streams[e_index, "rtime"]       = e_rtime
            streams[e_index, "srcport"]     = e_srcport
            streams[e_index, "dstport"]     = e_dstport
            streams[e_index, "srcaddr"]     = e_srcaddr
            streams[e_index, "dstaddr"]     = e_dstaddr
            streams[e_index, "ipv6"]        = ipv6
            streams[e_index, "flags_fin"]   = 0
            streams[e_index, "flags_syn"]   = 0
            streams[e_index, "flags_reset"] = 0
            streams[e_index, "flags_push"]  = 0
            streams[e_index, "flags_ack"]   = 0
            streams[e_index, "flags_urg"]   = 0
            streams[e_index, "flags_ecn"]   = 0
            streams[e_index, "flags_cwr"]   = 0
            streams[e_index, "flags_ns"]    = 0
            if (analysis) {
                streams[e_index, "analysis_ret"] = 0
                streams[e_index, "analysis_fst"] = 0
                streams[e_index, "analysis_spu"] = 0
                streams[e_index, "analysis_dup"] = 0
                streams[e_index, "analysis_out"] = 0
                streams[e_index, "analysis_los"] = 0
                streams[e_index, "analysis_alo"] = 0
                streams[e_index, "analysis_ful"] = 0
                streams[e_index, "analysis_wup"] = 0
                streams[e_index, "analysis_zro"] = 0
                streams[e_index, "analysis_zrp"] = 0
                streams[e_index, "analysis_zpa"] = 0
                streams[e_index, "analysis_kep"] = 0
                streams[e_index, "analysis_kpa"] = 0
                streams[e_index, "analysis_tfo"] = 0
                streams[e_index, "analysis_afo"] = 0
                streams[e_index, "analysis_ifo"] = 0
                streams[e_index, "analysis_prt"] = 0
            }
            if (custom) {
                streams[e_index, "l_custom_cnt"] = 0
                streams[e_index, "r_custom_cnt"] = 0
                streams[e_index, "l_custom_sum"] = 0
                streams[e_index, "r_custom_sum"] = 0
                streams[e_index, "l_custom_min"] = 0
                streams[e_index, "r_custom_min"] = 0
                streams[e_index, "l_custom_max"] = 0
                streams[e_index, "r_custom_max"] = 0
            }
            streams[e_index, "l_packets"]    = 0
            streams[e_index, "r_packets"]    = 0
            streams[e_index, "l_bytes"]      = 0
            streams[e_index, "r_bytes"]      = 0
        }
        streams[e_index, "last_rtime"] = e_rtime
        
        reverse = 0
        if (e_srcport != streams[e_index, "srcport"] || e_srcaddr != streams[e_index, "srcaddr"])
            reverse = 1

        if (e_flags["fin"]   != "" && e_flags["fin"]   != 0) streams[e_index, "flags_fin"]   = 1
        if (e_flags["syn"]   != "" && e_flags["syn"]   != 0) streams[e_index, "flags_syn"]   = 1
        if (e_flags["reset"] != "" && e_flags["reset"] != 0) streams[e_index, "flags_reset"] = 1
        if (e_flags["push"]  != "" && e_flags["push"]  != 0) streams[e_index, "flags_push"]  = 1
        if (e_flags["ack"]   != "" && e_flags["ack"]   != 0) streams[e_index, "flags_ack"]   = 1
        if (e_flags["urg"]   != "" && e_flags["urg"]   != 0) streams[e_index, "flags_urg"]   = 1
        if (e_flags["ecn"]   != "" && e_flags["ecn"]   != 0) streams[e_index, "flags_ecn"]   = 1
        if (e_flags["cwr"]   != "" && e_flags["cwr"]   != 0) streams[e_index, "flags_cwr"]   = 1
        if (e_flags["ns"]    != "" && e_flags["ns"]    != 0) streams[e_index, "flags_ns"]    = 1
        
        if (analysis) {
            if (e_analysis["ret"] != "" && e_analysis["ret"] != 0) streams[e_index, "analysis_ret"]++
            if (e_analysis["fst"] != "" && e_analysis["fst"] != 0) streams[e_index, "analysis_fst"]++
            if (e_analysis["spu"] != "" && e_analysis["spu"] != 0) streams[e_index, "analysis_spu"]++
            if (e_analysis["dup"] != "" && e_analysis["dup"] != 0) streams[e_index, "analysis_dup"]++
            if (e_analysis["out"] != "" && e_analysis["out"] != 0) streams[e_index, "analysis_out"]++
            if (e_analysis["los"] != "" && e_analysis["los"] != 0) streams[e_index, "analysis_los"]++
            if (e_analysis["alo"] != "" && e_analysis["alo"] != 0) streams[e_index, "analysis_alo"]++
            if (e_analysis["ful"] != "" && e_analysis["ful"] != 0) streams[e_index, "analysis_ful"]++
            if (e_analysis["wup"] != "" && e_analysis["wup"] != 0) streams[e_index, "analysis_wup"]++
            if (e_analysis["zro"] != "" && e_analysis["zro"] != 0) streams[e_index, "analysis_zro"]++
            if (e_analysis["zrp"] != "" && e_analysis["zrp"] != 0) streams[e_index, "analysis_zrp"]++
            if (e_analysis["zpa"] != "" && e_analysis["zpa"] != 0) streams[e_index, "analysis_zpa"]++
            if (e_analysis["kep"] != "" && e_analysis["kep"] != 0) streams[e_index, "analysis_kep"]++
            if (e_analysis["kpa"] != "" && e_analysis["kpa"] != 0) streams[e_index, "analysis_kpa"]++
            if (e_analysis["tfo"] != "" && e_analysis["tfo"] != 0) streams[e_index, "analysis_tfo"]++
            if (e_analysis["afo"] != "" && e_analysis["afo"] != 0) streams[e_index, "analysis_afo"]++
            if (e_analysis["ifo"] != "" && e_analysis["ifo"] != 0) streams[e_index, "analysis_ifo"]++
            if (e_analysis["prt"] != "" && e_analysis["prt"] != 0) streams[e_index, "analysis_prt"]++
        }
        if (custom) {
            if (e_custom_val != "") {
                if (reverse) {
                    streams[e_index, "l_custom_cnt"]++
                    if (custom_ftype <= 2) {
                        streams[e_index, "l_custom_sum"] += e_custom_val
                        if (streams[e_index, "l_custom_cnt"] == 1 || e_custom_val < streams[e_index, "l_custom_min"])
                            streams[e_index, "l_custom_min"] = e_custom_val
                        if (streams[e_index, "l_custom_cnt"] == 1 || e_custom_val > streams[e_index, "l_custom_max"])
                            streams[e_index, "l_custom_max"] = e_custom_val
                    }
                }
                else {
                    streams[e_index, "r_custom_cnt"]++
                    if (custom_ftype <= 2) {
                        streams[e_index, "r_custom_sum"] += e_custom_val
                        if (streams[e_index, "r_custom_cnt"] == 1 || e_custom_val < streams[e_index, "r_custom_min"])
                            streams[e_index, "r_custom_min"] = e_custom_val
                        if (streams[e_index, "r_custom_cnt"] == 1 || e_custom_val > streams[e_index, "r_custom_max"])
                            streams[e_index, "r_custom_max"] = e_custom_val
                    }
                }
            }
        }
        if (reverse) {
            streams[e_index, "l_packets"]++
            streams[e_index, "l_bytes"] += e_len
        }
        else {
            streams[e_index, "r_packets"]++
            streams[e_index, "r_bytes"] += e_len
        }
    };
    END {
        num = 0
        if (descending)
            PROCINFO["sorted_in"] = "compare_streams";
        for (i in indexes) {
            if (!indexes[i])
                continue
            num++
            
            #### Index ####
            printf("%5d", i);
            
            #### TIME (0:a 1:ad 2:dd 3:e 4:r 5:rs) ####
            if (time_type == 0) {
                split(streams[i, "atime"], array1, " ")
                split(array1[4], array4, ":")
                printf("  %02d:%02d:%09.6f", array4[1], array4[2], array4[3])
            }
            else if (time_type == 1) {
                split(streams[i, "atime"], array1, " ")
                month_str = array1[1]
                if (index(array1[1], "\"") > 0) {
                    split(array1[1], array2, "\"")
                    month_str = array2[2]
                }
                split(array1[2], array3, ",")
                split(array1[4], array4, ":")
                printf("  %04d-%02d-%02d %02d:%02d:%09.6f", array1[3], months[month_str], array3[1], array4[1], array4[2], array4[3])
            }
            else
                printf("  %15.6f", streams[i, "rtime"])
            
            #### Src/Dst ADDRESS ####
            if (STREAM[i, "ipv6"]) {
                printf("  %s:%d <----> %s:%d\n", streams[i, "srcaddr"], streams[i, "srcport"], streams[i, "dstaddr"], streams[i, "dstport"]);
                if (time_type == 1) printf("           ");
                printf("                                                                            ");
            }
            else
                printf("  %15s:%-5d <----> %15s:%-5d", streams[i, "srcaddr"], streams[i, "srcport"], streams[i, "dstaddr"], streams[i, "dstport"]);
            
            #### Duration ####
            printf("  %14.6f", streams[i, "last_rtime"] - streams[i, "rtime"])
            
            #### FLAGS ####
            printf("  [");
            if (streams[i, "flags_fin"])   printf("%sF%s", aces_colors["fin"],   ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_syn"])   printf("%sS%s", aces_colors["syn"],   ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_reset"]) printf("%sR%s", aces_colors["reset"], ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_push"])  printf("%sP%s", aces_colors["push"],  ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_ack"])   printf("%sA%s", aces_colors["ack"],   ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_urg"])   printf("%sU%s", aces_colors["urg"],   ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_ecn"])   printf("%sE%s", aces_colors["ecn"],   ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_cwr"])   printf("%sC%s", aces_colors["cwr"],   ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            if (streams[i, "flags_ns"])    printf("%sN%s", aces_colors["ns"],    ACES_END); else printf("%s-%s", ACES_GRAY, ACES_END);
            printf("] ");
            
            if (analysis) {
                #### Analysis ####
                print_analysis(streams[i, "analysis_ret"], aces_colors["ret"]);
                print_analysis(streams[i, "analysis_fst"], aces_colors["fst"]);
                if (analysis_level > 1)
                    print_analysis(streams[i, "analysis_spu"], aces_colors["spu"]);
                print_analysis(streams[i, "analysis_dup"], aces_colors["dup"]);
                print_analysis(streams[i, "analysis_out"], aces_colors["out"]);
                print_analysis(streams[i, "analysis_los"], aces_colors["los"]);
                print_analysis(streams[i, "analysis_alo"], aces_colors["alo"]);
                print_analysis(streams[i, "analysis_ful"], aces_colors["ful"]);
                print_analysis(streams[i, "analysis_wup"], aces_colors["wup"]);
                print_analysis(streams[i, "analysis_zro"], aces_colors["zro"]);
                print_analysis(streams[i, "analysis_zrp"], aces_colors["zrp"]);
                print_analysis(streams[i, "analysis_zpa"], aces_colors["zpa"]);
                print_analysis(streams[i, "analysis_kep"], aces_colors["kep"]);
                print_analysis(streams[i, "analysis_kpa"], aces_colors["kpa"]);
                if (analysis_level > 2)
                    print_analysis(streams[i, "analysis_tfo"], aces_colors["tfo"]);
                if (analysis_level > 3) {
                    print_analysis(streams[i, "analysis_afo"], aces_colors["afo"]);
                    print_analysis(streams[i, "analysis_ifo"], aces_colors["ifo"]);
                }
                print_analysis(streams[i, "analysis_prt"], aces_colors["prt"]);
            }
            else if (custom) {
                #### Custom Statistics ####
                print_statistics(streams[i, "l_custom_cnt"], streams[i, "l_custom_sum"], streams[i, "l_custom_min"], streams[i, "l_custom_max"]);
                printf("   ");
                print_statistics(streams[i, "r_custom_cnt"], streams[i, "r_custom_sum"], streams[i, "r_custom_min"], streams[i, "r_custom_max"]);
            }
            else {
                #### Packets Bytes ####
                print_traffic(streams[i, "l_packets"], streams[i, "l_bytes"]);
                printf("   ");
                print_traffic(streams[i, "r_packets"], streams[i, "r_bytes"]);
            }
            printf("\n");
        }
        if (num == 0) {
            print "WARNING: No such TCP stream." > "/dev/stderr"
            exit(1)
        }
        if (exceeded) {
            print "WARNING: Too many TCP streams." > "/dev/stderr"
            exit(1)
        }
        exit(0)
    }'
    
    return $?
}

tcp_stream_flow()
{
    tshark_filter="tcp.stream == $STREAM_INDEX"
    ipv6=0
    custom_column=0
    
    #==============================================#
    # Finds the stream                             #
    #==============================================#
    tshark_fields="-e frame.time_relative \
    -e tcp.srcport \
    -e tcp.dstport \
    -e ip.src \
    -e ip.dst \
    -e ipv6.src \
    -e ipv6.dst \
    -e eth.src \
    -e eth.dst"
    
    line=`$TSHARK_COMMAND -r $TSHARK_INFILE -R "$tshark_filter" -2 -c 1 -T fields -E separator=, $tshark_fields`
    if [ $? -ne 0 ]; then
        return 1
    fi
    if [ -z "$line" ]; then
        printf "WARNING: No such TCP stream.\n" 1>&2
        return 1
    fi
    first_rtime=`echo $line | cut -d, -f 1`
    srcport=`echo $line | cut -d, -f 2`
    dstport=`echo $line | cut -d, -f 3`
    srcaddr=`echo $line | cut -d, -f 4`
    dstaddr=`echo $line | cut -d, -f 5`
    if [ -z "$srcaddr" -o -z "$dstaddr" ]; then
        ipv6=1
        srcaddr=`echo $line | cut -d, -f 6`
        dstaddr=`echo $line | cut -d, -f 7`
    fi
    srcmac=`echo $line | cut -d, -f 8`
    dstmac=`echo $line | cut -d, -f 9`
    
    if [ $FLAG_V -eq 1 ]; then
        save="$srcport"; srcport="$dstport"; dstport="$save"
        save="$srcaddr"; srcaddr="$dstaddr"; dstaddr="$save"
        save="$srcmac";  srcmac="$dstmac";   dstmac="$save"
    fi

    #==============================================#
    # Builds tshark's fields list                  #
    #==============================================#
    if [ $ipv6 -eq 0 ]; then
       srcaddr_field="ip.src"
       dstaddr_field="ip.dst"
    else
       srcaddr_field="ipv6.src"
       dstaddr_field="ipv6.dst"
    fi
    if [ $TIME_TYPE -eq 0 -o $TIME_TYPE -eq 1 ]; then
        time_field="frame.time"
    elif [ $TIME_TYPE -eq 2 ]; then
        time_field="frame.time_delta_displayed"
    elif [ $TIME_TYPE -eq 3 ]; then
        time_field="frame.time_epoch"
    else
        time_field="frame.time_relative"
    fi
    if [ $FLAG_W -eq 1 ]; then
        window_field="tcp.window_size"
    else
        window_field="tcp.window_size_value"
    fi
    
    tshark_fields="-e frame.number \
    -e $time_field \
    -e tcp.srcport \
    -e tcp.dstport \
    -e $srcaddr_field \
    -e $dstaddr_field \
    -e tcp.flags.fin \
    -e tcp.flags.syn \
    -e tcp.flags.reset \
    -e tcp.flags.push \
    -e tcp.flags.ack \
    -e tcp.flags.urg \
    -e tcp.flags.ecn \
    -e tcp.flags.cwr \
    -e tcp.flags.ns \
    -e tcp.seq \
    -e tcp.ack \
    -e $window_field \
    -e tcp.len \
    -e tcp.option_kind \
    -e tcp.options.mss_val \
    -e tcp.options.wscale.shift \
    -e tcp.options.wscale.multiplier \
    -e tcp.options.sack.count \
    -e tcp.options.sack_le \
    -e tcp.options.sack_re \
    -e tcp.options.timestamp.tsval \
    -e tcp.options.timestamp.tsecr \
    -e tcp.analysis.retransmission \
    -e tcp.analysis.fast_retransmission \
    -e tcp.analysis.duplicate_ack \
    -e tcp.analysis.out_of_order \
    -e tcp.analysis.lost_segment \
    -e tcp.analysis.ack_lost_segment \
    -e tcp.analysis.window_full \
    -e tcp.analysis.window_update \
    -e tcp.analysis.zero_window \
    -e tcp.analysis.zero_window_probe \
    -e tcp.analysis.zero_window_probe_ack \
    -e tcp.analysis.keep_alive \
    -e tcp.analysis.keep_alive_ack \
    -e tcp.analysis.reused_ports"
    
    if [ $ANALYSIS_LEVEL -ge 1 ]; then
        tshark_fields="$tshark_fields -e tcp.analysis.spurious_retransmission"
    fi
    if [ $ANALYSIS_LEVEL -ge 2 ]; then
        tshark_fields="$tshark_fields -e tcp.analysis.tfo_syn"
    fi
    if [ $ANALYSIS_LEVEL -ge 3 ]; then
        tshark_fields="$tshark_fields -e tcp.analysis.tfo_ack"
        tshark_fields="$tshark_fields -e tcp.analysis.tfo_ignored"
    fi
    
    if [ $FLAG_F -eq 1 ]; then
        duplicated=0
        for field in $tshark_fields ; do
            if [ $field = "-e" ]; then
                continue
            fi
            custom_column=`expr $custom_column + 1`
            if [ $field = "$CUSTOM_FIELD" ]; then
                duplicated=1
                break
            fi
        done
        if [ $duplicated -eq 0 ]; then
            custom_column=0
            tshark_fields="$tshark_fields -e $CUSTOM_FIELD"
        fi
    fi
    
    #==============================================#
    # Displays header information                  #
    #==============================================#
    if [ $FLAG_H -ne 1 ]; then
        printf "========"
        if [ $TIME_TYPE -eq 1 ]; then
            printf "============================"
        elif [ $TIME_TYPE -eq 3 ]; then
            printf "==================="
        else 
            printf "================="
        fi
        printf "==============================================================================================================="
        if [ $FLAG_X -eq 1 ]; then
            printf "=========="
        fi
        if [ $FLAG_F -ne 0 ]; then
            printf "=============="
        else 
            printf "==============="
        fi
        printf "\n"
        printf "TCP Stream flow\n"
        printf "Filter: ${tshark_filter}\n"
        if [ $FLAG_F -eq 1 ]; then
            printf "CField: ${CUSTOM_FIELD}\n"
        fi
        printf "Stream: ${ACES_BOLD}${srcaddr}:${srcport}${ACES_END} <----> ${ACES_BOLD}${dstaddr}:${dstport}${ACES_END}\n"
        if [ -n "$srcmac" -a -n "$dstmac" ]; then
            printf "        ${ACES_GRAY}${srcmac}"
            print_vendor $srcmac
            printf ", ${dstmac}"
            print_vendor $dstmac
            printf "${ACES_END}\n"
        fi
        printf "\n"
        printf "     No."
        if [ $TIME_TYPE -eq 1 ]; then
            printf "                        TIME"
        elif [ $TIME_TYPE -eq 3 ]; then
            printf "               TIME"
        else 
            printf "             TIME"
        fi
        printf "          TCP flow (WINDOW Size, Src/Dst PORT, LENGTH)           FLAGS           SEQ/ACK Number          OPTION"
        if [ $FLAG_X -eq 1 ]; then
            printf "  Analysis"
        fi
        if [ $FLAG_F -ne 0 ]; then
            printf "  Custom FIELD"
        else
            printf "  Option VALUES"
        fi
        printf "\n"
        printf "========"
        if [ $TIME_TYPE -eq 1 ]; then
            printf "============================"
        elif [ $TIME_TYPE -eq 3 ]; then
            printf "==================="
        else 
            printf "================="
        fi
        printf "==============================================================================================================="
        if [ $FLAG_X -eq 1 ]; then
            printf "=========="
        fi
        if [ $FLAG_F -ne 0 ]; then
            printf "=============="
        else 
            printf "==============="
        fi
        printf "\n"
    fi
    
    #==============================================#
    # Executes tshark                              #
    #==============================================#
    printf "Now analyzing...\r" 1>&2
    $TSHARK_COMMAND -r $TSHARK_INFILE -Y "$tshark_filter" -T fields $tshark_fields $TSHARK_OPTIONS | \
      $AWK_COMMAND -v time_type="$TIME_TYPE"           \
                   -v first_rtime="$first_rtime"       \
                   -v analysis="$FLAG_X"               \
                   -v analysis_level="$ANALYSIS_LEVEL" \
                   -v custom="$FLAG_F"                 \
                   -v custom_column="$custom_column"   \
                   -v own_port="$srcport"              \
                   -v own_ipaddr="$srcaddr"            \
                   -v appearance="$APPEARANCE" '
    BEGIN {
        FS = "\t"
        
        ### ANSI Color Escape Sequences ###
        if (appearance == 0) {
            ACES_BOLD    = ""
            ACES_RED     = ""
            ACES_GREEN   = ""
            ACES_YELLOW  = ""
            ACES_BLUE    = ""
            ACES_MAGENTA = ""
            ACES_CYAN    = ""
            ACES_GRAY    = ""
            ACES_END     = ""
        }
        else if (appearance == 1) {
            ACES_BOLD    = "\033[1;97m"
            ACES_RED     = "\033[1;91m"
            ACES_GREEN   = "\033[1;92m"
            ACES_YELLOW  = "\033[1;93m"
            ACES_BLUE    = "\033[1;94m"
            ACES_MAGENTA = "\033[1;95m"
            ACES_CYAN    = "\033[1;96m"
            ACES_GRAY    = "\033[37m"
            ACES_END     = "\033[0m"
        }
        else {
            ACES_BOLD    = "\033[1;30m"
            ACES_RED     = "\033[1;31m"
            ACES_GREEN   = "\033[1;32m"
            ACES_YELLOW  = "\033[1;33m"
            ACES_BLUE    = "\033[1;34m"
            ACES_MAGENTA = "\033[1;35m"
            ACES_CYAN    = "\033[1;36m"
            ACES_GRAY    = "\033[90m"
            ACES_END     = "\033[0m"
        }
        
        aces_colors["fin"]   = ACES_GREEN
        aces_colors["syn"]   = ACES_CYAN
        aces_colors["reset"] = ACES_RED
        aces_colors["push"]  = ACES_BOLD
        aces_colors["ack"]   = ACES_GRAY
        aces_colors["urg"]   = ACES_MAGENTA
        aces_colors["ecn"]   = ACES_YELLOW
        aces_colors["cwr"]   = ACES_MAGENTA
        aces_colors["ns"]    = ACES_YELLOW
        
        aces_colors["ret"] = ACES_GREEN
        aces_colors["fst"] = ACES_CYAN
        aces_colors["spu"] = ACES_CYAN
        aces_colors["dup"] = ACES_BLUE
        aces_colors["out"] = ACES_BOLD
        aces_colors["los"] = ACES_RED
        aces_colors["alo"] = ACES_RED
        aces_colors["ful"] = ACES_MAGENTA
        aces_colors["wup"] = ACES_YELLOW
        aces_colors["zro"] = ACES_BOLD
        aces_colors["zrp"] = ACES_MAGENTA
        aces_colors["zpa"] = ACES_YELLOW
        aces_colors["kep"] = ACES_MAGENTA
        aces_colors["kpa"] = ACES_YELLOW
        aces_colors["tfo"] = ACES_BOLD
        aces_colors["afo"] = ACES_MAGENTA
        aces_colors["ifo"] = ACES_YELLOW
        aces_colors["prt"] = ACES_BOLD
        
        months["Jan"] = 1
        months["Feb"] = 2
        months["Mar"] = 3
        months["Apr"] = 4
        months["May"] = 5
        months["Jun"] = 6
        months["Jul"] = 7
        months["Aug"] = 8
        months["Sep"] = 9
        months["Oct"] = 10
        months["Nov"] = 11
        months["Dec"] = 12
    };
    {
        e_number              = $1
        e_time                = $2
        e_srcport             = $3
        e_dstport             = $4
        e_srcaddr             = $5
        e_dstaddr             = $6
        e_flags["fin"]        = $7
        e_flags["syn"]        = $8
        e_flags["reset"]      = $9
        e_flags["push"]       = $10
        e_flags["ack"]        = $11
        e_flags["urg"]        = $12
        e_flags["ecn"]        = $13
        e_flags["cwr"]        = $14
        e_flags["ns"]         = $15
        e_seq                 = $16
        e_ack                 = $17
        e_window_size         = $18
        e_len                 = $19
        e_option_kind         = $20
        e_options["mss"]      = $21
        e_options["ws_shift"] = $22
        e_options["ws_multi"] = $23
        e_options["sack_cnt"] = $24
        e_options["sack_le"]  = $25
        e_options["sack_re"]  = $26
        e_options["ts_val"]   = $27
        e_options["ts_ecr"]   = $28
        e_analysis["ret"]     = $29
        e_analysis["fst"]     = $30
        e_analysis["spu"]     = 0
        e_analysis["dup"]     = $31
        e_analysis["out"]     = $32
        e_analysis["los"]     = $33
        e_analysis["alo"]     = $34
        e_analysis["ful"]     = $35
        e_analysis["wup"]     = $36
        e_analysis["zro"]     = $37
        e_analysis["zrp"]     = $38
        e_analysis["zpa"]     = $39
        e_analysis["kep"]     = $40
        e_analysis["kpa"]     = $41
        e_analysis["tfo"]     = 0
        e_analysis["afo"]     = 0
        e_analysis["ifo"]     = 0
        e_analysis["prt"]     = $42
        if (analysis) {
            if (analysis_level >= 1)
                e_analysis["spu"] = $43
            if (analysis_level >= 2)
                e_analysis["tfo"] = $44
            if (analysis_level >= 3) {
                e_analysis["afo"] = $45
                e_analysis["ifo"] = $46
            }
        }
        if (custom) {
            if (custom_column == 0) {
                if (analysis_level == 0)      custom_column = 43
                else if (analysis_level == 1) custom_column = 44
                else if (analysis_level == 2) custom_column = 45
                else                          custom_column = 47
            }
            e_custom_val = $custom_column
        }
        
        #### No. ####
        printf("%8d", e_number)
        
        #### TIME (0:a 1:ad 2:dd 3:e 4:r 5:rs) ####
        if (time_type == 0) {
            split(e_time, array1, " ")
            split(array1[4], array4, ":")
            printf("  %02d:%02d:%09.6f", array4[1], array4[2], array4[3])
        }
        else if (time_type == 1) {
            split(e_time, array1, " ")
            month_str = array1[1]
            if (index(array1[1], "\"") > 0) {
                split(array1[1], array2, "\"")
                month_str = array2[2]
            }
            split(array1[2], array3, ",")
            split(array1[4], array4, ":")
            printf("  %04d-%02d-%02d %02d:%02d:%09.6f", array1[3], months[month_str], array3[1], array4[1], array4[2], array4[3])
        }
        else if (time_type == 3) {
            printf("  %17.6f", e_time)
        }
        else if (time_type == 5) {
            printf("  %15.6f", e_time - first_rtime)
        }
        else
            printf("  %15.6f", e_time)
        
        #### TCP flow (WINDOW Size, Src/Dst PORT, LENGTH) ####
        reverse = 0
        if (e_srcport != own_port || e_srcaddr != own_ipaddr)
            reverse = 1
        
        window_label = "[Win=" e_window_size "]"
        dstport_label = "(" e_dstport ")"
        srcport_label = "(" e_srcport ")"
        if (e_len == "")       len_label = "-----"
        else if (e_len > 9999) len_label = e_len
        else if (e_len > 999)  len_label = "-" e_len
        else if (e_len > 99)   len_label = "--" e_len
        else if (e_len > 9)    len_label = "---" e_len
        else if (e_len > 0)    len_label = "----" e_len
        else                   len_label = "-----"
        if (reverse) {
            printf("%s%23s%s", ACES_GRAY, dstport_label, ACES_END)
            printf("%s|%s%s<----%s-------%s%s|%s", ACES_BOLD, ACES_END, ACES_BLUE, len_label, ACES_END, ACES_BOLD, ACES_END)
            if (e_srcport > 9999)     printf("%s%s%s%-16s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else if (e_srcport > 999) printf("%s%s%s%-17s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else if (e_srcport > 99)  printf("%s%s%s%-18s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else if (e_srcport > 9)   printf("%s%s%s%-19s", ACES_GRAY, srcport_label, ACES_END, window_label)
            else                      printf("%s%s%s%-20s", ACES_GRAY, srcport_label, ACES_END, window_label)
        }
        else {
            if (e_srcport > 9999)     printf("%16s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else if (e_srcport > 999) printf("%17s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else if (e_srcport > 99)  printf("%18s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else if (e_srcport > 9)   printf("%19s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            else                      printf("%20s%s%s%s", window_label, ACES_GRAY, srcport_label, ACES_END)
            printf("%s|-----%s------>|%s", ACES_BOLD, len_label, ACES_END);
            printf("%s%-23s%s", ACES_GRAY, dstport_label, ACES_END)
        }
        
        #### FLAGS ####
        cnt = 0
        flags_label = "["
        if (e_flags["fin"]   != "" && e_flags["fin"]   != 0) { cnt++; flags_label = flags_label aces_colors["fin"]   "F" ACES_END }
        if (e_flags["syn"]   != "" && e_flags["syn"]   != 0) { cnt++; flags_label = flags_label aces_colors["syn"]   "S" ACES_END }
        if (e_flags["reset"] != "" && e_flags["reset"] != 0) { cnt++; flags_label = flags_label aces_colors["reset"] "R" ACES_END }
        if (e_flags["push"]  != "" && e_flags["push"]  != 0) { cnt++; flags_label = flags_label aces_colors["push"]  "P" ACES_END }
        if (e_flags["ack"]   != "" && e_flags["ack"]   != 0) { cnt++; flags_label = flags_label aces_colors["ack"]   "A" ACES_END }
        if (e_flags["urg"]   != "" && e_flags["urg"]   != 0) { cnt++; flags_label = flags_label aces_colors["urg"]   "U" ACES_END }
        if (e_flags["ecn"]   != "" && e_flags["ecn"]   != 0) { cnt++; flags_label = flags_label aces_colors["ecn"]   "E" ACES_END }
        if (e_flags["cwr"]   != "" && e_flags["cwr"]   != 0) { cnt++; flags_label = flags_label aces_colors["cwr"]   "C" ACES_END }
        if (e_flags["ns"]    != "" && e_flags["ns"]    != 0) { cnt++; flags_label = flags_label aces_colors["ns"]    "N" ACES_END }
        if (cnt == 0)      flags_label = flags_label "]      "
        else if (cnt == 1) flags_label = flags_label "]     "
        else if (cnt == 2) flags_label = flags_label "]    "
        else if (cnt == 3) flags_label = flags_label "]   "
        else if (cnt == 4) flags_label = flags_label "]  "
        else if (cnt == 5) flags_label = flags_label "] "
        else               flags_label = flags_label "]"
        printf("%s", flags_label);
        
        #### SEQ/ACK Number ####
        if (reverse) {
            if (e_flags["ack"] == "" || e_flags["ack"] == 0 || e_ack == "")
                printf("              ");
            else
                printf("Ack=%-10u", e_ack);
            if (e_seq == "")
                printf("                ");
            else
                printf("  Seq=%-10u", e_seq);
        }
        else {
            if (e_seq == "")
                printf("              ");
            else
                printf("Seq=%-10u", e_seq);
            if (e_flags["ack"] == "" || e_flags["ack"] == 0 || e_ack == "")
                printf("                ");
            else
                printf("  Ack=%-10u", e_ack);
        }
        
        #### OPTION ####
        optset["eol"]      = 0
        optset["nop"]      = 0
        optset["mss"]      = 0
        optset["wscale"]   = 0
        optset["sackperm"] = 0
        optset["sack"]     = 0
        optset["tstamp"]   = 0
        optset["other"]    = 0
        other_kinds        = ""
        opt_num = split(e_option_kind, array3, ",")
        for (i = 1; i <= opt_num; i++) {
            if (array3[i] == "0")      optset["eol"]      = 1
            else if (array3[i] == "1") optset["nop"]      = 1
            else if (array3[i] == "2") optset["mss"]      = 1
            else if (array3[i] == "3") optset["wscale"]   = 1
            else if (array3[i] == "4") optset["sackperm"] = 1
            else if (array3[i] == "5") optset["sack"]     = 1
            else if (array3[i] == "8") optset["tstamp"]   = 1
            else {
                if (!optset["other"])
                    other_kinds = array3[i]
                else
                    other_kinds = other_kinds "," array3[i]
                optset["other"] = 1
            }
        }
        if (optset["mss"])      opt_label = "m";           else opt_label = ACES_GRAY "-" ACES_END;
        if (optset["wscale"])   opt_label = opt_label "w"; else opt_label = opt_label ACES_GRAY "-" ACES_END;
        if (optset["sackperm"]) opt_label = opt_label "S"; else opt_label = opt_label ACES_GRAY "-" ACES_END;
        if (optset["sack"])     opt_label = opt_label "s"; else opt_label = opt_label ACES_GRAY "-" ACES_END;
        if (optset["tstamp"])   opt_label = opt_label "t"; else opt_label = opt_label ACES_GRAY "-" ACES_END;
        if (optset["other"])    opt_label = opt_label "O"; else opt_label = opt_label ACES_GRAY "-" ACES_END;
        printf("  %s", opt_label);
        
        if (analysis) {
            #### Analysis ####
            printf("  ");
            cnt = 0
            for (key in e_analysis) {
                if (e_analysis[key] != "" && e_analysis[key] != 0) {
                    if (cnt > 0) 
                        printf("%s,%s", ACES_GRAY, ACES_END);
                    printf("%s%s%s", aces_colors[key], key, ACES_END);
                    cnt++
                }
            }
            if (cnt == 0)      printf("        "); 
            else if (cnt == 1) printf("     "); 
            else if (cnt == 2) printf(" "); 
        }
        if (custom) {
            #### Custom FIELD ####
            printf("  %s", e_custom_val)
        }
        else {
            #### Option VALUES ####
            printf("  ")
            if (optset["mss"])      printf("MSS=%d ", e_options["mss"]);
            if (optset["wscale"])   printf("WS=%d(%d) ", e_options["ws_shift"], e_options["ws_multi"]);
            if (optset["sackperm"]) printf("SACK_PERM=1 ");
            if (optset["sack"])     printf("SLE=%u SRE=%u ", e_options["sack_le"], e_options["sack_re"]);
            if (optset["tstamp"]) {
                if (reverse == 0)   printf("TSval=%d TSecr=%d ", e_options["ts_val"], e_options["ts_ecr"]);
                else                printf("TSecr=%d TSval=%d ", e_options["ts_ecr"], e_options["ts_val"]);
            }
            if (optset["other"])    printf("OTHER(kind:%s)", other_kinds);
        }
        printf("\n")
    };
    END {
        exit(0)
    }'

    return $?
}

#==============================================================#
# Global variables                                             #
#==============================================================#
OS_TYPE=0   # 0:Linux(default), 1:SunOS, 2:Darwin

TSHARK_COMMAND="tshark"
AWK_COMMAND="awk"
OUI_FILE=$WIRESHARK_OUIFILE_LINUX
MAX_STREAMS=262144
APPEARANCE=1   # 0:Colorless, 1:Dark(default), 2:Light

FLAG_H=0
FLAG_C=0
FLAG_4=0
FLAG_6=0
FLAG_D=0
FLAG_V=0
FLAG_W=0
FLAG_Q=0
FLAG_X=0
FLAG_R=0
FLAG_S=0
FLAG_T=0
FLAG_P=0
FLAG_A=0
FLAG_F=0

ANALYSIS_LEVEL=0
TSHARK_INFILE=""
TSHARK_OPTIONS=""
CUSTOM_FIELD=""
CUSTOM_FTYPE=0
TIME_TYPE=0
FILTER_PORT=0
FILTER_ADDR=""
STREAM_INDEX=0
ACES_BOLD=""
ACES_RED=""
ACES_GREEN=""
ACES_YELLOW=""
ACES_BLUE=""
ACES_MAGENTA=""
ACES_CYAN=""
ACES_GRAY=""
ACES_END=""
 
#==============================================================#
# Checks os name                                               #
#==============================================================#
case `uname -s` in
    Linux)
        OS_TYPE=0
        OUI_FILE=$WIRESHARK_OUIFILE_LINUX
        ;;
    SunOS)
        OS_TYPE=1
        OUI_FILE=$WIRESHARK_OUIFILE_SUNOS
        ;;
    Darwin)
        OS_TYPE=2
        OUI_FILE=$WIRESHARK_OUIFILE_DARWIN
        ;;
esac

#==============================================================#
# Gets options                                                 #
#==============================================================#
while getopts "HC46dvwqxhVr:s:t:p:a:f:" flag; do
    case $flag in
        \?) usage;;
        H) FLAG_H=1;;
        C) FLAG_C=1; APPEARANCE=0;;
        4) FLAG_4=1;;
        6) FLAG_6=1;;
        d) FLAG_D=1;;
        v) FLAG_V=1;;
        w) FLAG_W=1;;
        q) FLAG_Q=1;;
        x) FLAG_X=1;;
        h) print_help;;
        V) print_version;;
        r) FLAG_R=1; TSHARK_INFILE=$OPTARG;;
        s) FLAG_S=1; STREAM_INDEX=$OPTARG;;
        t) FLAG_T=1
           case $OPTARG in
               "a")  TIME_TYPE=0;;
               "ad") TIME_TYPE=1;;
               "dd") TIME_TYPE=2;;
               "e")  TIME_TYPE=3;;
               "r")  TIME_TYPE=4;;
               "rs") TIME_TYPE=5;;
               *)    usage;;
           esac
           ;;
        p) FLAG_P=1; FILTER_PORT=$OPTARG;;
        a) FLAG_A=1; FILTER_ADDR=$OPTARG;;
        f) FLAG_F=1; CUSTOM_FIELD=$OPTARG;;
    esac
done

shift `expr $OPTIND - 1`
if [ -n "$1" ]; then
    printf "ERROR: Invalid argument ($1).\n" 1>&2
    usage
fi

#==============================================================#
# Checks parameter                                             #
#==============================================================#
if [ $FLAG_R -eq 0 ]; then
    usage
fi

if [ $FLAG_S -eq 0 ]; then
    #### <list mode> ####
    if [ $FLAG_V -eq 1 -o $FLAG_W -eq 1 -o $FLAG_Q -eq 1 ]; then
        usage
    fi
    if [ $TIME_TYPE -eq 2 -o $TIME_TYPE -eq 3 -o $TIME_TYPE -eq 5 ]; then
        usage
    fi
    if [ $FLAG_4 -eq 1 -a $FLAG_6 -eq 1 ]; then
        usage
    fi
    if [ $FLAG_X -eq 1 -a $FLAG_F -eq 1 ]; then
        usage
    fi
else
    #### <flow mode> ####
    if [ $FLAG_4 -eq 1 -o $FLAG_6 -eq 1 -o $FLAG_D -eq 1 -o $FLAG_P -eq 1 -o $FLAG_A -eq 1 ]; then
        usage
    fi
fi

if [ $FLAG_D -eq 1 -a $OS_TYPE -ne 0 ]; then
    usage
    #printf "ERROR: Can not use -d option.\n" 1>&2
    #exit 1
fi

if [ $FLAG_S -eq 1 ]; then
    check_number $STREAM_INDEX
    if [ $? -ne 0 ]; then
        printf "ERROR: Invalid stream index.\n" 1>&2
        exit 1
    fi
fi

if [ $FLAG_A -eq 1 ]; then
    echo "$FILTER_ADDR" | grep : > /dev/null
    if [ $? -eq 0 ]; then
        check_ipv6 "$FILTER_ADDR"
        if [ $? -ne 0 ]; then
            printf "ERROR: Invalid IPv6 format.\n" 1>&2
            exit 1
        fi
    else
        check_ipv4 "$FILTER_ADDR"
        if [ $? -ne 0 ]; then
            printf "ERROR: Invalid IPv4 format.\n" 1>&2
            exit 1
        fi
    fi
fi

#==============================================================#
# Checks package installation & enviroment variables           #
#==============================================================#
if [ -n "$TCPSHARK_TSHARK_COMMAND" ]; then
    if [ ! -x $TCPSHARK_TSHARK_COMMAND ]; then
        printf "ERROR: Invalid enviroment variable (TCPSHARK_TSHARK_COMMAND).\n" 1>&2
        exit 1
    fi
    TSHARK_COMMAND=$TCPSHARK_TSHARK_COMMAND
else
    which $TSHARK_COMMAND > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        printf "ERROR: ${TSHARK_COMMAND} not found.\n" 1>&2
        printf "Please install Wireshark package.\n" 1>&2
        exit 1
    fi
fi

if [ -n "$TCPSHARK_AWK_COMMAND" ]; then
    if [ ! -x $TCPSHARK_AWK_COMMAND ]; then
        printf "ERROR: Invalid enviroment variable (TCPSHARK_AWK_COMMAND).\n" 1>&2
        exit 1
    fi
    AWK_COMMAND=$TCPSHARK_AWK_COMMAND
else
    for cmd in gawk nawk awk; do
        which $cmd > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            AWK_COMMAND=$cmd
            break
        fi
    done
    if [ -z "$AWK_COMMAND" ]; then
        printf "ERROR: *awk not found.\n" 1>&2
        exit 1
    fi
fi
if [ $FLAG_D -eq 1 ]; then
    echo $AWK_COMMAND | grep "gawk$" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        printf "ERROR: Need gawk (GNU awk) for -d option.\n" 1>&2
        exit 1
    fi
fi

if [ -n "$TCPSHARK_WIRESHARK_OUIFILE" ]; then
    if [ ! -r $TCPSHARK_WIRESHARK_OUIFILE ]; then
        printf "ERROR: Invalid enviroment variable (TCPSHARK_WIRESHARK_OUIFILE).\n" 1>&2
        exit 1
    fi
    OUI_FILE=$TCPSHARK_WIRESHARK_OUIFILE
else
    if [ ! -f $OUI_FILE ]; then
        printf "ERROR: OUI file not found.\n" 1>&2
        exit 1
    fi
fi

if [ -n "$TCPSHARK_MAX_STREAMS" ]; then
    check_number $TCPSHARK_MAX_STREAMS
    if [ $? -ne 0 ]; then
        printf "ERROR: Invalid enviroment variable (TCPSHARK_MAX_STREAMS).\n" 1>&2
        exit 1
    fi
    MAX_STREAMS=$TCPSHARK_MAX_STREAMS
fi

if [ -n "$TCPSHARK_APPEARANCE" ]; then
    case $TCPSHARK_APPEARANCE in
        dark|Dark|DARK)
            APPEARANCE=1
            ;;
        light|Light|Light)
            APPEARANCE=2
            ;;
        *)
            printf "ERROR: Invalid enviroment variable (TCPSHARK_APPEARANCE).\n" 1>&2
            exit 1
            ;;
    esac
fi

#==============================================================#
# Sets ANSI color escape sequences                             #
#==============================================================#
case $APPEARANCE in
    1)
        ACES_BOLD="\033[1;97m"
        ACES_RED="\033[1;91m"
        ACES_GREEN="\033[1;92m"
        ACES_YELLOW="\033[1;93m"
        ACES_BLUE="\033[1;94m"
        ACES_MAGENTA="\033[1;95m"
        ACES_CYAN="\033[1;96m"
        ACES_GRAY="\033[37m"
        ACES_END="\033[0m"
        ;;
    2)
        ACES_BOLD="\033[1;30m"
        ACES_RED="\033[1;31m"
        ACES_GREEN="\033[1;32m"
        ACES_YELLOW="\033[1;33m"
        ACES_BLUE="\033[1;34m"
        ACES_MAGENTA="\033[1;35m"
        ACES_CYAN="\033[1;36m"
        ACES_GRAY="\033[90m"
        ACES_END="\033[0m"
        ;;
esac

#==============================================================#
# Checks user (not on macOS)                                   #
#==============================================================#
if [ $OS_TYPE -ne 2 -a `whoami` = 'root' ]; then
    getent passwd tcpshark > /dev/null
    if [ $? -ne 0 ]; then
        printf "WARNING: Unable to run this script as root user.\n" 1>&2
        printf "Do you create a nologin user for TcpShark? [y/n]: "
        read input
        case $input in
            y|yes|Y|Yes|YES)
                printf "\n"
                ;;
            *)
                exit 2
                ;;
        esac
        if [ $OS_TYPE -eq 1 ]; then
            useradd -g nogroup -d / -s /bin/sh tcpshark
            passwd -N tcpshark > /dev/null
        else
            useradd -s /sbin/nologin -M tcpshark
        fi
        printf "Created user 'tcpshark'.\n"
        printf "If no longer use this script, delete the user.\n\n"
        printf "Do you run TcpShark? [y/n]: "
        read input
        case $input in
            y|yes|Y|Yes|YES)
                printf "\n"
                ;;
            *)
                exit 2
                ;;
        esac
    fi
    TSHARK_COMMAND="sudo -u tcpshark $TSHARK_COMMAND"
fi

#==============================================================#
# Checks wireshark version                                     #
#==============================================================#
line=`$TSHARK_COMMAND -v | head -1`
if [ $? -ne 0 ]; then
    exit 1
fi
version=`echo "$line" | cut -d ' ' -f 2`
echo "$version" | grep "^[0-9]" > /dev/null
if [ $? -ne 0 ]; then
    version=`echo "$line" | cut -d ' ' -f 3`
    echo "$version" | grep "^[0-9]" > /dev/null
    if [ $? -ne 0 ]; then
        printf "ERROR: Unexpected wireshark version.\n" 1>&2
        printf "Please contact the author.\n" 1>&2
        exit 1
    fi
fi
case "$version" in
    1.[8-9].*)      ANALYSIS_LEVEL=0;;
    1.1[0-1].*)     ANALYSIS_LEVEL=0;;
    1.1[2-9].*)     ANALYSIS_LEVEL=1;;
    1.[2-9][0-9].*) ANALYSIS_LEVEL=1;;
    2.*)            ANALYSIS_LEVEL=2;;
    3.[0-3].*)      ANALYSIS_LEVEL=2;;
    3.*)            ANALYSIS_LEVEL=3;;
    [4-9].*)        ANALYSIS_LEVEL=3;;
    *)              printf "ERROR: Wireshark's version too old.\n" 1>&2; exit 1;;
esac

#==============================================================#
# Checks custom filed                                          #
#==============================================================#
if [ $FLAG_F -eq 1 ]; then
    check_ftype $CUSTOM_FIELD
    CUSTOM_FTYPE=$?
    if [ $CUSTOM_FTYPE -eq 0 ]; then
        printf "ERROR: Field not supported ($CUSTOM_FIELD)." 1>&2
        exit 1
    fi
fi

#==============================================================#
# Builds tshark's option parameter                             #
#==============================================================#
TSHARK_OPTIONS="-o tcp.analyze_sequence_numbers:TRUE"
if [ $FLAG_Q -eq 1 ]; then
    TSHARK_OPTIONS="$TSHARK_OPTIONS -o tcp.relative_sequence_numbers:TRUE"
else
    TSHARK_OPTIONS="$TSHARK_OPTIONS -o tcp.relative_sequence_numbers:FALSE"
fi

#==============================================================#
# Analyzes packet capture                                      #
#==============================================================#
if [ $FLAG_S -eq 0 ]; then
    tcp_stream_list
else
    tcp_stream_flow
fi

exit $?

